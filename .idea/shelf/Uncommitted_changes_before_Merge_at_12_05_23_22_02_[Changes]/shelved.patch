Index: .cli.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from \".request\" import _request\nfrom .freshsales_exception import FreshsalesException\n\nclass FreshsalesAnalytics(object):\ndef __init__(self, domain=None, app_token=None): self.domain = domain\nself.app_token = app_token\n\ndef identify(self, identifier=None, properties={}): data = {\n}\ndata['identifier'] = identifier\ndata['visitor'] = properties\nself._post('visitors', data)\n\ndef trackEvent(self, identifier=None, event=None, properties={\n}): properties['name'] = event\ndata = {}\ndata['identifier'] = identifier\ndata['event'] = properties\nself._post('events', data)\n\ndef trackPageView(self, identifier=None, url=None): data = {\n}\ndata['identifier'] = identifier\ndata['page_view'] = {'url': url}\nself._post('page_views', data)\n\ndef _post(self, action, data): if self._valid(action, data): data['application_token'] = self.app_token\ndata['sdk'] = \"python\"\npath = self.domain + '/track/' + action\n_request(path, data)\n\ndef _valid(self, action, data): if not self.domain or not self.app_token: raise  FreshsalesException(\"Either Freshsales domain / appToken \"\n+ \"you provided during the initialization of FreshsalesAnalytics is empty.\")\nelif not data['identifier']: raise  FreshsalesException(\"Identifier passed is empty\")\nelif action == 'page_views' and not data['page_view']['url']: raise  FreshsalesException(\"Page URL passed to trackPageView method is empty.\")\nelif action == 'events' and not data['event']['name']: raise  FreshsalesException(\"Event Name passed to trackEvent method is empty.\")\n\nreturn True\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.cli.json b/.cli.json
--- a/.cli.json	(revision 422291ec30abe0f348481c15cf57ae00f30fefea)
+++ b/.cli.json	(date 1683905006000)
@@ -37,3 +37,4 @@
 
 return True
 
+
Index: modal/server/ruby/server.rb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># frozen_string_literal: true\n\nrequire\n'stripe'\nrequire\n'sinatra'\nrequire\n'dotenv'\n\n# Replace if using a different env file or config\nDotenv.load\n\n# For sample support and debugging, not required for production:\nStripe.set_app_info(\n    'stripe-samples/identity/modal',\n    version: '0.0.1',\nurl: 'https://github.com/stripe-samples'\n)\nStripe.api_version = '2020-08-27'\nStripe.api_key = ENV['STRIPE_SECRET_KEY']\n\nset: static, true\nset: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])\nset: port, 4242\n\nget\n'/'\ndo\ncontent_type\n'text/html'\nsend_file\nFile.join(settings.public_folder, 'index.html')\nend\n\nget\n'/config'\ndo\ncontent_type\n'application/json'\n{\n    publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],\n}.to_json\nend\n\npost\n'/create-verification-session'\ndo\ncontent_type\n'application/json'\n\n# See https://stripe.com/docs/api/identity/verification_sessions/create\n# for the full list of accepted parameters.\nverification_session = Stripe::Identity::VerificationSession.create({\n    type: 'document',  # 'id_number' | 'address'\n    metadata: {\n        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.\n    },\n\n    # Additional options for configuring the verification session:\n    # options: {\n    #   document: {\n    #     # Array of strings of allowed identity document types.\n    #     allowed_types: ['driving_license'], # passport | id_card\n    #\n    #     # Collect an ID number and perform an ID number check with the\n    #     # document’s extracted name and date of birth.\n    #     require_id_number: true,\n    #\n    #     # Disable image uploads, identity document images have to be captured\n    #     # using the device’s camera.\n    #     require_live_capture: true,\n    #\n    #     # Capture a face image and perform a selfie check comparing a photo\n    #     # ID and a picture of your user’s face.\n    #     require_matching_selfie: true,\n    #   }\n    # },\n})\n\n# Send the VerificationSession client_secret to the client.\n{\n    client_secret: verification_session.client_secret\n}.to_json\nend\n\npost\n'/webhook'\ndo\n# You can use webhooks to receive information about asynchronous payment events.\n# For more about our webhook events check out https://stripe.com/docs/webhooks.\nwebhook_secret = ENV['STRIPE_WEBHOOK_SECRET']\npayload = request.body.read\nif !webhook_secret.empty?\n# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.\nsig_header = request.env['HTTP_STRIPE_SIGNATURE']\nevent = nil\n\nbegin\nevent = Stripe::Webhook.construct_event(\n    payload, sig_header, webhook_secret\n)\nrescue\nJSON::ParserError = > e\n# Invalid payload\nstatus\n400\nreturn\nrescue\nStripe::SignatureVerificationError = > e\n# Invalid signature\nputs\n'⚠️  Webhook signature verification failed.'\nstatus\n400\nreturn\nend\nelse\ndata = JSON.parse(payload, symbolize_names: true)\nevent = Stripe::Event.construct_from(data)\nend\n\ncase\nevent.type\nwhen\n'identity.verification_session.requires_input'\nverification_session = event.data.object\n\nputs\n\" ❌ Identity requires input from user: #{verification_session.id}\"\n\n# At least one of the verification checks failed\n\ncase\nverification_session.last_error.code\nwhen\n'document_unverified_other'\n# The document was invalid\nwhen\n'document_expired'\n# The document was expired\nwhen\n'document_type_not_suported'\n# The document type was not supported\nelse\n# ...\nend\nwhen\n'identity.verification_session.verified'\nverification_session = event.data.object\nputs\n\" ✅ Identity verified: #{verification_session.id}\"\nwhen\n'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'\nverification_session = event.data.object\nputs\n\" \uD83D\uDFE1 #{event.type}: #{verification_session.id}\"\nend\n\ncontent_type\n'application/json'\n{\n    status: 'success'\n}.to_json\nend\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/server/ruby/server.rb b/modal/server/ruby/server.rb
--- a/modal/server/ruby/server.rb	(revision 422291ec30abe0f348481c15cf57ae00f30fefea)
+++ b/modal/server/ruby/server.rb	(date 1683905006000)
@@ -37,9 +37,9 @@
 do
 content_type
 'application/json'
-{
-    publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
-}.to_json
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
 end
 
 post
Index: modal/connect-onboarding-for-express/client/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/client/index.html b/modal/connect-onboarding-for-express/client/index.html
new file mode 100644
--- /dev/null	(date 1683907039000)
+++ b/modal/connect-onboarding-for-express/client/index.html	(date 1683907039000)
@@ -0,0 +1,31 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Stripe Sample Connect Onboarding for Express accounts</title>
+    <meta content="Stripe Sample Connect Onboarding for Express accounts" name="description"/>
+
+    <link href="favicon.ico" rel="icon" type="image/x-icon"/>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+    <script src="https://js.stripe.com/v3/"></script>
+    <script defer src="/script.js"></script>
+</head>
+
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <header class="sr-header">
+            <div class="sr-header__logo"></div>
+        </header>
+
+        <div class="sr-payment-summary payment-view">
+            <h1 class="order-amount">Setup payouts to list your home on Kavholm</h1>
+        </div>
+
+        <button id="submit">Setup payouts on Stripe</button>
+    </div>
+</div>
+</div>
+</body>
+</html>
Index: connect-destination-charge-checkout/client/success.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/client/success.html b/connect-destination-charge-checkout/client/success.html
new file mode 100644
--- /dev/null	(date 1683920096000)
+++ b/connect-destination-charge-checkout/client/success.html	(date 1683920096000)
@@ -0,0 +1,53 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Stripe Destination Charge with Checkout</title>
+    <meta content="Stripe Destination Charge with Checkout" name="description"/>
+
+    <link href="favicon.ico" rel="icon" type="image/x-icon"/>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+</head>
+
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <div class="sr-payment-summary completed-view">
+            <h1>Your payment succeeded</h1>
+            <h4>
+                View CheckoutSession response:</a>
+            </h4>
+        </div>
+        <div class="sr-section completed-view">
+            <div class="sr-callout">
+              <pre>
+    
+              </pre>
+            </div>
+            <button onclick="window.location.href = '/';">Restart demo</button>
+        </div>
+    </div>
+</div>
+</div>
+<script>
+      var urlParams = new URLSearchParams(window.location.search);
+      var sessionId = urlParams.get("session_id")
+      if (sessionId) {
+        fetch("/checkout-session?sessionId=" + sessionId).then(function(result){
+          return result.json()
+        }).then(function(session){
+          var sessionJSON = JSON.stringify(session, null, 2);
+          document.querySelector("pre").textContent = sessionJSON;
+        }).catch(function(err){
+          console.log('Error when fetching Checkout session', err);
+        });
+      }
+
+
+
+
+
+</script>
+</body>
+</html>
\ No newline at end of file
Index: modal/connect-onboarding-for-express/client/success.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/client/success.html b/modal/connect-onboarding-for-express/client/success.html
new file mode 100644
--- /dev/null	(date 1683907039000)
+++ b/modal/connect-onboarding-for-express/client/success.html	(date 1683907039000)
@@ -0,0 +1,29 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Stripe Sample Connect Onboarding for Express accounts</title>
+    <meta content="Stripe Sample Connect Onboarding for Express accounts" name="description"/>
+
+    <link href="favicon.ico" rel="icon" type="image/x-icon"/>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+    <script src="https://js.stripe.com/v3/"></script>
+    <script defer src="/script.js"></script>
+</head>
+
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <header class="sr-header">
+            <div class="sr-header__logo"></div>
+        </header>
+
+        <div class="sr-payment-summary payment-view">
+            <h1 class="order-amount">The user returned to the app</h1>
+        </div>
+    </div>
+</div>
+</div>
+</body>
+</html>
Index: subscription=sub_xxxxxxxxxxxxx,
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/subscription=sub_xxxxxxxxxxxxx, b/subscription=sub_xxxxxxxxxxxxx,
new file mode 100644
--- /dev/null	(date 1683905006000)
+++ b/subscription=sub_xxxxxxxxxxxxx,	(date 1683905006000)
@@ -0,0 +1,1353 @@
+https://webtechnicom.net
+
+
+
+ation, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "bash: created:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "id": "fa_123",
+  "country": "US",
+  "supported_currencies": ["usd"],
+  // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+      bash: id:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "country": "US",
+  "supported_currencies": ["usd"],
+  // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldbash: country:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "supported_currencies": ["usd"],
+  // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  bash: supported_currencies:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `statusbash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "stabash: active_features:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closbash: pending_features:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the Finbash: restricted_features:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount wabash: balance:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - accounbash: cash:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      bash: inbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons"bash: outbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons": []
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+bash: financial_addresses.aba: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "financial_addresses": [
+bash: financial_addresses:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     {
+>       "type": "aba",
+>       "supported_networks": ["ach", "domestic_wire_us"],
+>       "aba": {
+>         "account_number_last4": "7890",
+>         // Use the expand[] parameter to view the `account_number` field hidden by default
+>         "account_number": "1234567890",
+>         "routing_number": "000000001",
+>         "bank_name": "Goldman Sachs"
+>       }
+bash: type:: command not found
+bash: supported_networks:: command not found
+bash: aba:: command not found
+bash: account_number_last4:: command not found
+bash: account_number: command not found
+bash: //: is a directory
+bash: account_number:: command not found
+bash: routing_number:: command not found
+bash: bank_name:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   ],
+bash: ],: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "livemode": true,
+bash: livemode:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // Financial accounts begin in the "open" state, but can be closed
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   // `status_details.closed` is populated once a financial account is closed
+bash: status_details.closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "status": "open",
+bash: status:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "status_details": {
+bash: status_details:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     // `closed` is null if financial account is not closed
+bash: closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$     "closed": {
+bash: closed:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$       // List of one or more reasons why the FinancialAccount was closed:
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - account_rejected
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - clos      // - clos      // - clos 
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       "reasons": []
+bash: reasons:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // User-defined metadata
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "metadata": {},
+bash: metadata:: command not found
+(base) iMac-de-Guido : stripe treasury financial_accounts list
+ (Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" 
+
+Copier
+{
+"error": {
+"message"
+: 
+"This property cannot be expanded (100 000 000 )."
+,
+"request_log_url"
+: 
+"https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+,
+"type"
+: 
+"invalid_request_error"
+,
+},
+}
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - accounbash: cash:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      bash: inbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons"bash: outbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons": []
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+bash: financial_addresses.aba: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "financial_addresses": [
+bash: financial_addresses:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     {
+>       "type": "aba",
+>       "supported_networks": ["ach", "domestic_wire_us"],
+>       "aba": {
+>         "account_number_last4": "7890",
+>         // Use the expand[] parameter to view the `account_number` field hidden by default
+>         "account_number": "1234567890",
+>         "routing_number": "000000001",
+>         "bank_name": "Goldman Sachs"
+>       }
+bash: type:: command not found
+bash: supported_networks:: command not found
+bash: aba:: command not found
+bash: account_number_last4:: command not found
+bash: account_number: command not found
+bash: //: is a directory
+bash: account_number:: command not found
+bash: routing_number:: command not found
+bash: bank_name:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   ],
+bash: ],: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "livemode": true,
+bash: livemode:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // Financial accounts begin in the "open" state, but can be closed
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   // `status_details.closed` is populated once a financial account is closed
+bash: status_details.closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "status": "open",
+bash: status:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "status_details": {
+bash: status_details:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     // `closed` is null if financial account is not closed
+bash: closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$     "closed": {
+bash: closed:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$       // List of one or more reasons why the FinancialAccount was closed:
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - account_rejected
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - clos      // - clos      // - clos 
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       "reasons": []
+bash: reasons:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // User-defined metadata
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "metadata": {},
+bash: metadata:: command not found
+(base) iMac-de-Guido stripe treasury financial_accounts retrieve {{FINANCIAL_ACCOUNT_ID}}
+bash: }stripe: command not found
+(base) iMac-de-Guid {
+>   "object": "treasury.financial_account",
+>   "created": 1612927106,
+>   "id": "fa_123",
+>   "country": "US",
+>   "supported_currencies": ["usd"],
+>   // Arrays of active, pending and restricted features summarize the status of all requested features
+>   "active_features": ["financial_addresses.aba", "deposit_insurance"],
+>   "pending_features": ["inbound_transfers.ach"],
+>   "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+>   "balance": {
+>     "cash": {"usd": 9000},
+>     "inbound_pending": {"usd": 0},
+>     "outbound_pending": {"usd": 1000}
+>   },
+>   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+>   "financial_addresses": [
+>     {
+>       "type": "aba",
+>       "supported_networks": ["ach", "domestic_wire_us"],
+>       "aba": {
+>         "account_number_last4": "7890",
+>         // Use the expand[] parameter to view the `account_number` field hidden by default
+>         "account_number": "1234567890",
+>         "routing_number": "000000001",
+>         "bank_name": "Goldman Sachs"
+>       }
+>     }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_detailsbash: object:: command not found
+bash: created:: command not found
+closed
+  "status": "open",
+  "status_details": {
+ bash: id:: command not found
+bash: country:: command not found
+   // `closed` is null if financial account is notbash: supported_currencies:: command not found
+ closed
+    "closed": {
+      // List of one or mobash: //: is a directory
+bash: active_features:: command not found
+bash: pending_features:: command not found
+re reasons why the FinancialAccount was closed:
+  bash: restricted_features:: command not found
+bash: balance:: command not found
+bash: cash:: command not found
+    // - account_rejected
+      // - closed_by_plabash: inbound_pending:: command not found
+bash: outbound_pending:: command not found
+bash: },: command not found
+tform
+      // - other
+      "reasons": []
+    }
+ bash: financial_addresses.aba: command not found
+bash: //: is a directory
+ },
+
+  // User-defined metadata
+  "metadata": {},
+bash: financial_addresses:: command not found
+bash: type:: command not found
+bash: supported_networks:: command not found
+}bash: aba:: command not found
+bash: account_number_last4:: command not found
+bash: account_number: command not found
+bash: //: is a directory
+bash: account_number:: command not found
+bash: routing_number:: command not found
+bash: bank_name:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   ],
+bash: ],: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "livemode": true,
+bash: livemode:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // Financial accounts begin in the "open" state, but can be closed
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   // `status_details.closed` is populated once a financial account is closed
+bash: status_details.closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "status": "open",
+bash: status:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "status_details": {
+bash: status_details:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     // `closed` is null if financial account is not closed
+bash: closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$     "closed": {
+bash: closed:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$       // List of one or more reasons why the FinancialAccount was closed:
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - account_rejected
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - closed_by_platform
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - other
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       "reasons": []
+bash: reasons:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // User-defined metadata
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "metadata": {},
+bash: metadata:: command not found
+(base) iMac-de-Guid{
+  "error": {
+    "message": "This property cannot be expanded (100 000 000 ).",
+    "request_log_url": "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270",
+    "type": "invalid_request_error"
+  }
+}bash: }{: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "error": {
+bash: error:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "message": "This property cannot be expanded (100 000 000 ).",
+bash: message:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "request_log_url": "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270",
+bash: request_log_url:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "type": "invalid_request_error"
+bash: type:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guid(Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" 
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$ Copier
+{
+"error": {
+"message"
+: 
+"This property cannot be expanded (100 000 000 )."
+,
+"request_log_url"
+: 
+"https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+,
+"type"
+: 
+"invalid_request_error"
+,
+},
+}bash: Copier: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ {
+> "error": {
+> "message"
+> : 
+> "This property cannot be expanded (100 000 000 )."
+> ,
+> "request_log_url"
+> : 
+> "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+> ,
+> "type"
+> : 
+> "invalid_request_error"
+> ,
+> },
+> }(Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" 
+bash: syntax error near unexpected token `('
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$ Copier
+{
+"error": {
+"message"
+: 
+"This property cannot be expanded (100 000 000 )."
+,
+"request_log_url"
+: 
+"https://dashboard.stripe.com/test/logsbash: Copier: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ {
+> "error": {
+> "message"
+> : 
+> "This property cannot be expanded (100 000 000 )."
+> ,
+> "request_log_url"
+> : 
+> "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+> ,
+> "type"
+> : 
+> "invalid_request_error"
+> ,
+> },
+> }(Atlas Account) $ stripe treasury financial_accounts retrieve {{FINANCIAL_ACCOUNT_ID}}STEVE ALEXANDRE NAGLE CH68 06300506329514556 
+bash: syntax error near unexpected token `('
+(base) iMac-de-Guido:identity-main webtechnicom$ Wrong number of arguments passed. Expected arguments: financial_account
+(Atlas Account) $ 5354456210031493 10/25 *** 
+(Atlas Account) $ CH68 0630 0506 3295 1455 6 
+(Atlas Account) $ 5406 5900 0268 2713 03/25 *** 
+(Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS 
+(Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS bash: Wrong: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5354456210031493 10/25 *** 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ CH68 0630 0506 3295 1455 6 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5406 5900 0268 2713 03/25 *** 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ $payload
+(base) iMac-de-Guido:identity-main webtechnicom$ payment completed 
+bash: payment: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $payload completed
+bash: completed: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $load
+(base) iMac-de-Guido:identity-main webtechnicom$ $completed
+(base) iMac-de-Guido:identity-main webtechnicom$ $payd $100 000 000 00 € $completed
+bash: 00: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $payd $10 000 000 .oo€$in full
+bash: 0: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ payment completed 
+bash: payment: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $payment$completed
+(base) iMac-de-Guid(Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" $payd in fulled
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ $payload
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+tures": [],
+>       "restricted_features": [],
+>       "status": "open",
+>       "status_details": {
+>         "closed": null
+>       },
+>       "supported_currencies": [
+>         "usd"
+>       ]
+>     },
+>     {...},
+>     {...}
+>   ]
+> }{
+>   "object": "treasury.financial_account_features",
+>   "card_issuing": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "deposit_insurance": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "financial_addresses": {
+>     "aba": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "inbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "intra_stripe_flows": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "outbound_payments": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "outbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   }
+> }stripe treasury financial_account_features update fa_1N6j1wBRCd7whSqPbNzR5avB \
+>   -d "card_issuing[requested]"=true
+> {
+>   "object": "treasury.financial_account_features",
+>   "deposit_insurance": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "financial_addresses": {
+>     "aba": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "inbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "intra_stripe_flows": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "outbound_payments": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "outbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   }
+> }stripe treasury features retrieve fa_1N6j1wBRCd7whSqPbNzR5avB
+> {
+>   "object": "treasury.financial_account_features",
+>   "card_issuing": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "deposit_insurance": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "financial_addresses": {
+>     "aba": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "inbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "intra_stripe_flows": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "outbound_payments": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "outbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "id": "fa_1N6j1wBRCd7whSqPbNzR5avB"
+> }{
+>   "id": "trxn_1N6j5kBRCd7whSqPIXYlJTQN",
+>   "object": "treasury.transaction",
+>   "amount": -100,
+>   "balance_impact": {
+>     "cash": -100,
+>     "inbound_pending": 0,
+>     "outbound_pending": 100
+>   },
+>   "created": 1683848412,
+>   "currency": "usd",
+>   "description": "Jane Austen (6789) | Outbound transfer | transfer",
+>   "financial_account": "fa_1N6j5kBRCd7whSqPSueSHTWs",
+>   "flow": "obt_1N6j5kBRCd7whSqPiatcSEyn",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "status": "open",
+>   "status_transitions": {
+>     "posted_at": null,
+>     "void_at": null
+>   }
+>                     // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:
+  }
+
+> # Please enter the commit message for your changes. Lines starting
+> # with '#' will be ignored, and an empty message aborts the commit.
+> #
+> # On branch master
+> # Your branch is up to date with 'origin/master'.
+> #
+> # Changes to be committed:
+> #new file:   ...]
+> #new file:   .idea/.gitignore
+> #new file:   .idea/codeStyles/Project.xml
+> #new file:   .idea/codeStyles/codeStyleConfig.xml
+> #new file:   .idea/identity-main.iml
+> #new file:   .idea/inspectionProfiles/Project_Default.xml
+> #new file:   .idea/inspectionProfiles/profiles_settings.xml
+> #new file:   .idea/misc.xml
+> #new file:   .idea/modules.xml
+> #new file:   .idea/vcs.xml
+> #modified:   README.md
+> #new file:   YouTrack_Server_TLS.pem
+> #new file:   checkout.css
+> #new file:   checkout.html
+> #new file:   checkout.js
+> #new file:   codiga.yml
+> #new file:   connect-destination-charge-checkout/.cli.json
+> #new file:   connect-destination-charge-checkout/.env.example
+> #new file:   connect-destination-charge-checkout/.gitignore
+> #new file:   connect-destination-charge-checkout/LICENSE
+> #new file:   connect-destination-charge-checkout/README.md
+> #new file:   connect-destination-charge-checkout/client/canceled.html
+> #new file:   connect-destination-charge-checkout/client/css/global.css
+> #new file:   connect-destination-charge-checkout/client/css/normalize.css
+> #new file:   connect-destination-charge-checkout/client/favicon.ico
+> #new file:   connect-destination-charge-checkout/client/guitar.png
+> #new file:   connect-destination-charge-checkout/client/index.html
+> #new file:   connect-destination-charge-checkout/client/script.js
+#       new file:   connect-destination-charge-checkout/client/succes> #new file:   connect-destination-charge-checkout/client/success.html
+> #new file:   connect-destination-charge-checkout/server/.htaccess
+> #new file:   connect-destination-charge-checkout/server/README.md
+> #new file:   connect-destination-charge-checkout/server/composer.json
+> #new file:   connect-destination-charge-checkout/server/config.php
+> #new file:   connect-destination-charge-checkout/server/index.php
+> #new file:   e
+> #new file:   modal/connect-onboarding-for-express/.cli.json
+> #new file:   modal/connect-onboarding-for-express/.env.example
+> #new file:   modal/connect-onboarding-for-express/.gitignore
+> #new file:   modal/connect-onboarding-for-express/LICENSE
+> #new file:   modal/connect-onboarding-for-express/README.md
+> #new file:   modal/connect-onboarding-for-express/client/css/global.css
+> #new file:   modal/connect-onboarding-for-express/client/css/normalize.css
+> #new file:   modal/connect-onboarding-for-express/client/favicon.ico
+> #new file:   modal/connect-onboarding-for-express/client/index.html
+> #new file:   modal/connect-onboarding-for-express/client/script.js
+> #new file:   modal/connect-onboarding-for-express/client/success.html
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile.lock
+> #new file:   modal/connect-onboarding-for-express/server/README.md
+> #new file:   modal/connect-onboarding-for-express/server/server.py
+> #new file:   server.py
+> #new file:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Changes not staged for commit:
+> #modified:   ...]
+> #modified:   .cli.json
+> #modified:   .idea/identity-main.iml
+> #modified:   .idea/misc.xml
+> #modified:   .idea/vcs.xml
+> #modified:   .sr-select:first-child
+> #modified:   .sr-select:last-child
+> #modified:   README.md
+> #modified:   modal/server/ruby/server.rb
+> #modified:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Untracked files:
+> #,
+> 
+> # Please enter the commit message for your changes. Lines starting
+> # with '#' will be ignored, and an empty message aborts the commit.
+> #
+> # On branch master
+> # Your branch is up to date with 'origin/master'.
+> #
+> # Changes to be committed:
+> #new file:   ...]
+> #new file:   .idea/.gitignore
+> #new file:   .idea/codeStyles/Project.xml
+> #new file:   .idea/codeStyles/codeStyleConfig.xml
+> #new file:   .idea/identity-main.iml
+> #new file:   .idea/inspectionProfiles/Project_Default.xml
+> #new file:   .idea/inspectionProfiles/profiles_settings.xml
+> #new file:   .idea/misc.xml
+> #new file:   .idea/modules.xml
+> #new file:   .idea/vcs.xml
+> #modified:   README.md
+> #new file:   YouTrack_Server_TLS.pem
+> #new file:   checkout.css
+> #new file:   checkout.html
+> #new file:   checkout.js
+> #new file:   codiga.yml
+> #new file:   connect-destination-charge-checkout/.cli.json
+> #new file:   connect-destination-charge-checkout/.env.example
+> #new file:   connect-destination-charge-checkout/.gitignore
+> #new file:   connect-destination-charge-checkout/LICENSE
+> #new file:   connect-destination-charge-checkout/README.md
+> #new file:   connect-destination-charge-checkout/client/canceled.html
+> #new file:   connect-destination-charge-checkout/client/css/global.css
+> #new file:   connect-destination-charge-checkout/client/css/normalize.css
+> #new file:   connect-destination-charge-checkout/client/favicon.ico
+> #new file:   connect-destination-charge-checkout/client/guitar.png
+> #new file:   connect-destination-charge-checkout/client/index.html
+> #new file:   connect-destination-charge-checkout/client/script.js
+> #new file:   connect-destination-charge-checkout/client/success.html
+> #new file:   connect-destination-charge-checkout/server/.htaccess
+> #new file:   connect-destination-charge-checkout/server/README.md
+> #new file:   connect-destination-charge-checkout/server/composer.json
+> #new file:   connect-destination-charge-checkout/server/config.php
+> #new file:   connect-destination-charge-checkout/server/index.php
+> #new file:   e
+> #new file:   modal/connect-onboarding-for-express/.cli.json
+> #new file:   modal/connect-onboarding-for-express/.env.example
+> #new file:   modal/connect-onboarding-for-express/.gitignore
+> #new file:   modal/connect-onboarding-for-express/LICENSE
+> #new file:   modal/connect-onboarding-for-express/README.md
+> #new file:   modal/connect-onboarding-for-express/client/css/global.css
+> #new file:   modal/connect-onboarding-for-express/client/css/normalize.css
+> #new file:   modal/connect-onboarding-for-express/client/favicon.ico
+> #new file:   modal/connect-onboarding-for-express/client/index.html
+> #new file:   modal/connect-onboarding-for-express/client/script.js
+> #new file:   modal/connect-onboarding-for-express/client/success.html
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile.lock
+> #new file:   modal/connect-onboarding-for-express/server/README.md
+> #new file:   modal/connect-onboarding-for-express/server/server.py
+> #new file:   server.py
+> #new file:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Changes not staged for commit:
+> #modified:   ...]
+> #modified:   .cli.json
+> #modified:   .idea/identity-main.iml
+> #modified:   .idea/misc.xml
+> #modified:   .idea/vcs.xml
+> #modified:   .sr-select:first-child
+> #modified:   .sr-select:last-child
+> #modified:   README.md
+> #modified:   modal/server/ruby/server.rb
+> #modified:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Untracked files:
+> #,
+> #:
+> #APIclient.swift
+> #APPAPIClient.h
+> #APPAPIClient.m
+> #APPAppDelegate.m
+> #AppDelegate.swift
+> #This property cannot be expanded (100 000 000 ).
+> #account_number:
+> #bank_name:
+> #error:
+> #helloworld/
+> #identity/
+> #invalid_request_error
+> #message
+> #request_log_url
+> #routing_number:
+> #type
+> #}
+> #},
+> #
+> stripe treasury transactions retrieve trxn_1N6j5kBRCd7whSqPIXYlJTQN
+> {
+>   "id": "trxn_1N6j5kBRCd7whSqPIXYlJTQN",
+>   "object": "treasury.transaction",
+>   "amount": -100,
+>   "balance_impact": {
+>     "cash": -100,
+>     "inbound_pending": 0,
+>     "outbound_pending": 100
+>   },
+>   "created": 1683848412,
+>   "currency": "usd",
+>   "description": "Jane Austen (6789) | Outbound transfer | transfer",
+>   "financial_account": "fa_1N6j5kBRCd7whSqPSueSHTWs",
+>   "flow": "obt_1N6j5kBRCd7whSqPiatcSEyn",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "status": "open",
+>   "status_transitions": {
+>     "posted_at": null,
+>     "void_at": null
+>   }
+>                     // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:
+              if let data = data {;                 do { Any]
+                      // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:
+  }
+   stripe treasury transactions list \
+>   --financial-account=fa_1N6j5kBRCd7whSqPSueSHTWs \
+>   --limit=3
+> {
+>   "object": "list",
+>   "url": "/v1/treasury/transactions",
+>   "has_more": false,
+>   "data": [
+>     {
+>       "id": "trxn_1N6j5kBRCd7whSqPIXYlJTQN",
+>       "object": "treasury.transaction",
+>       "amount": -100,
+>       "balance_impact": {
+>         "cash": -100,
+>         "inbound_pending": 0,
+>         "outbound_pending": 100
+>       },
+>       "created": 1683848412,
+>       "currency": "usd",
+>       "description": "Jane Austen (6789) | Outbound transfer | transfer",
+>       "financial_account": "fa_1N6j5kBRCd7whSqPSueSHTWs",
+>       "flow": "obt_1N6j5kBRCd7whSqPiatcSEyn",
+>       "flow_type": "outbound_transfer",
+>       "livemode": false,
+>       "status": "open",
+>       "status_transitions": {
+>         "posted_at": null,
+>         "void_at": null
+>       }
+>     },
+>     {...},
+>     {...}
+>   ]
+> }{
+>   "id": "trxne_1N6jFCBRCd7whSqPPqicrz7r",
+>   "object": "treasury.transaction_entry",
+>   "balance_impact": {
+>     "cash": 0,
+>     "inbound_pending": 0,
+>     "outbound_pending": -1000
+>   },
+>   "created": 1683848998,
+>   "currency": "usd",
+>   "effective_at": 1683848998,
+>   "financial_account": "fa_1N6jFCBRCd7whSqPm4m7B6sl",
+>   "flow": "obt_1N6jFCBRCd7whSqPwWha1sLU",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "transaction": "trxn_1N6jFCBRCd7whSqPomBoWeso",
+>   "type": "outbound_transfer"
+> }stripe treasury transaction_entries retrieve trxne_1N6jFCBRCd7whSqPPqicrz7r
+> {
+>   "id": "trxne_1N6jFCBRCd7whSqPPqicrz7r",
+>   "object": "treasury.transaction_entry",
+>   "balance_impact": {
+>     "cash": 0,
+>     "inbound_pending": 0,
+>     "outbound_pending": -1000
+>   },
+>   "created": 1683848998,
+>   "currency": "usd",
+>   "effective_at": 1683848998,
+>   "financial_account": "fa_1N6jFCBRCd7whSqPm4m7B6sl",
+>   "flow": "obt_1N6jFCBRCd7whSqPwWha1sLU",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "transaction": "trxn_1N6jFCBRCd7whSqPomBoWeso",
+>   "type": "outbound_transfer"
+> }stripe treasury transaction_entries list \
+>   --financial-account=fa_1N6jFCBRCd7whSqPm4m7B6sl \
+>   --limit=3
+{
+  "object": "list",
+  "url": "/v1/treasury/received_credits",
+  "has_more": false,
+  "data": [
+    {
+      "id": "rc_1N6jRpBRCd7whSqPYIMhm1lz",
+      "object": "treasury.received_credit",
+      "amount": 1234,
+      "created": 1683849781,
+      "currency": "usd",
+      "description": "Stripe Test",
+      "failure_code": null,
+      "financial_account": "fa_1N6jRpBRCd7whSqPtua59kkd",
+      "hosted_regulatory_receipt_url": "https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xR3E0dEZCUkNkN3doU3FQKLWE9qIGMgYvOLXGMiY6NpMrKKjWdWTxInrkJVguy75VQAkpP-Vjrj9jCuUwqs8gDsLzcEUHWV79IBDQff2Vxb3kqc0u5Q",
+      "initiating_payment_method_details": {
+        "billing_details": {
+          "address": {
+            "city": null,
+            "country": null,
+            "line1": null,
+            "line2": null,
+            "postal_code": null,
+            "state": null
+          },
+          "email": null,
+          "name": "Jane Austen"
+        },
+        "type": "us_bank_account",
+        "us_bank_account": {
+          "bank_name": "STRIPE TEST BANK",
+          "last4": "6789",
+          "routing_number": "110000000"
+        }
+      },
+      "linked_flows": {
+        "credit_reversal": null,
+        "issuing_authorization": null,
+        "issuing_transaction": null,
+        "source_flow": null,
+        "source_flow_type": null
+      },
+      "livemode": false,
+      "network": "ach",
+      "reversal_details": {
+        "deadline": 1684195200,
+        "restricted_reason": null
+      },
+      "status": "succeeded",
+      "transaction": "trxn_1N6jRpBRCd7whSqPh9SI0udS"
+    },
+    {...},
+    {...}
+  ]
+}
+{
+  "id": "fcaowns_1N6jcDBRCd7whSqPf4C9ZTPW",
+  "object": "financial_connections.account_ownership",
+  "created": 1683850425,
+  "owners": {
+    "object": "list",
+    "data": [],
+    "has_more": false,
+    "url": "/v1/financial_connections/accounts/fca_1N6jcDBRCd7whSqPJdWj4v5q/owners?ownership=fcaowns_1N6jcDBRCd7whSqPf4C9ZTPW"
+  }
+}
+{
+  "id": "fcaown_1N6jcDBRCd7whSqP2eCsqHfr",
+  "object": "financial_connections.account_owner",
+  "email": "nobody+janesmith@stripe.com",
+  "name": "Jane Smith",
+  "ownership": "fcaowns_1N6jcDBRCd7whSqPHRD7Tpq5",
+  "phone": "+1 555-555-5555",
+  "raw_address": "123 Main Street, Everytown USA",
+  "refreshed_at": null
+}
\ No newline at end of file
Index: connect-destination-charge-checkout/client/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/client/index.html b/connect-destination-charge-checkout/client/index.html
new file mode 100644
--- /dev/null	(date 1683907039000)
+++ b/connect-destination-charge-checkout/client/index.html	(date 1683907039000)
@@ -0,0 +1,81 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Stripe Destination Charge with Checkout</title>
+    <meta content="Stripe Destination Charge with Checkout" name="description"/>
+
+    <link href="favicon.ico" rel="icon" type="image/x-icon"/>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+    <script src="https://js.stripe.com/v3/"></script>
+    <script defer src="/script.js"></script>
+</head>
+
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <h1>Accept a payment with destination charges and Checkout</h1>
+        <div class="spinner"></div>
+        <!-- Section to display when no connected accounts have been created -->
+        <div class="hidden" id="no-accounts-section">
+            <div>You need to <a href="https://stripe.com/docs/connect/collect-then-transfer-guide#create-account">create
+                an
+                account</a> before you can process a payment.
+            </div>
+        </div>
+        <!-- Section to display when connected accounts have been created, but none have charges enabled -->
+        <div class="hidden" id="disabled-accounts-section">
+            <div>None of your recently created accounts have charges enabled. <span class="express hidden">Log in to an Express account's dashboard to complete the onboarding process.</span><span
+                    class="custom hidden">Manage your Custom accounts and complete the onboarding process <a
+                    href="https://dashboard.stripe.com/test/connect/accounts/overview">in the dashboard.</a></span><span
+                    class="standard hidden">View your Standard accounts <a
+                    href="https://dashboard.stripe.com/test/connect/accounts/overview">in your platform's dashboard</a>, and use their credentials to log in to Stripe and complete the onboarding process.</span>
+            </div>
+            <form class="hidden" id="disabled-accounts-form">
+                <div class="sr-form-row">
+                    <label for="disabled-accounts-select">Disabled account</label>
+                    <!-- Options are added to this select in JS -->
+                    <select class="sr-select" id="disabled-accounts-select"></select>
+                </div>
+                <div class="sr-form-row">
+                    <button class='full-width' type="submit">View Express dashboard</button>
+                </div>
+            </form>
+        </div>
+        <!-- Section to display when at least one connected account has charges enabled -->
+        <div class="hidden" id="enabled-accounts-section">
+            <section class="container">
+                <div>
+                    <h1>Guitar lessons</h1>
+                    <h4>$10/hour</h4>
+                    <div class="item-image">
+                        <img
+                                height="160"
+                                src="guitar.png"
+                                width="140"
+                        />
+                    </div>
+                </div>
+                <div class="quantity-setter">
+                    <button class="increment-btn" disabled id="subtract">
+                        -
+                    </button>
+                    <input id="quantity-input" min="1" type="number" value="1"/>
+                    <button class="increment-btn" id="add">+</button>
+                </div>
+                <p class="sr-legal-text">Number of hours (max 10)</p>
+                <div class="sr-form-row">
+                    <label for="enabled-accounts-select">Pick a teacher</label>
+                    <select class="sr-select" id="enabled-accounts-select"></select>
+                </div>
+                <button
+                        id="submit"
+                ></button>
+            </section>
+            <div id="error-message"></div>
+        </div>
+    </div>
+</div>
+</body>
+</html>
Index: codiga.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/codiga.yml b/codiga.yml
new file mode 100644
--- /dev/null	(date 1683905006000)
+++ b/codiga.yml	(date 1683905006000)
@@ -0,0 +1,4 @@
+rulesets:
+  - python-security
+  - python-best-practices
+  - python-code-style
\ No newline at end of file
Index: connect-destination-charge-checkout/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/.gitignore b/connect-destination-charge-checkout/.gitignore
new file mode 100644
--- /dev/null	(date 1683905006000)
+++ b/connect-destination-charge-checkout/.gitignore	(date 1683905006000)
@@ -0,0 +1,30 @@
+.env
+.DS_Store
+.vscode/*
+!.vscode/extensions.json
+
+# Node files
+node_modules/
+
+# Ruby files
+Gemfile.lock
+
+# Python files
+__pycache__
+venv
+
+# PHP files
+vendor
+logs
+
+# Java files
+.settings
+target/
+.classpath
+.factorypath
+.project
+
+# Typescript
+dist
+
+**/virtual
\ No newline at end of file
Index: connect-destination-charge-checkout/.env.example
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/.env.example b/connect-destination-charge-checkout/.env.example
new file mode 100644
--- /dev/null	(date 1683905006000)
+++ b/connect-destination-charge-checkout/.env.example	(date 1683905006000)
@@ -0,0 +1,9 @@
+# Stripe keys
+STRIPE_PUBLISHABLE_KEY=pk_12345
+STRIPE_SECRET_KEY=sk_12345
+STRIPE_WEBHOOK_SECRET=whsec_1234
+
+# Environment variables 
+STATIC_DIR=../../client 
+BASE_PRICE=10000
+DOMAIN="http://localhost:4242"
Index: connect-destination-charge-checkout/.cli.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/.cli.json b/connect-destination-charge-checkout/.cli.json
new file mode 100644
--- /dev/null	(date 1683905006000)
+++ b/connect-destination-charge-checkout/.cli.json	(date 1683905006000)
@@ -0,0 +1,19 @@
+{
+  "name": "connect-destination-charge-checkout",
+  "configureDotEnv": false,
+  "integrations": [
+    {
+      "name": "main",
+      "clients": [
+        "web"
+      ],
+      "servers": [
+        "java",
+        "node",
+        "php",
+        "python",
+        "ruby"
+      ]
+    }
+  ]
+}
Index: connect-destination-charge-checkout/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/LICENSE b/connect-destination-charge-checkout/LICENSE
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/connect-destination-charge-checkout/LICENSE	(date 1683905007000)
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) 2019- Stripe, Inc. (https://stripe.com)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
Index: connect-destination-charge-checkout/client/script.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/client/script.js b/connect-destination-charge-checkout/client/script.js
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/connect-destination-charge-checkout/client/script.js	(date 1683905007000)
@@ -0,0 +1,218 @@
+// The max and min number of items a customer can purchase
+var MIN_ITEMS = 1;
+var MAX_ITEMS = 10;
+
+document
+  .getElementById("quantity-input")
+  .addEventListener("change", function (evt) {
+    // Ensure customers only buy between 1 and 10 items
+    if (evt.target.value < MIN_ITEMS) {
+      evt.target.value = MIN_ITEMS;
+    }
+    if (evt.target.value > MAX_ITEMS) {
+      evt.target.value = MAX_ITEMS;
+    }
+  });
+
+/* Method for changing the product quantity when a customer clicks the increment / decrement buttons */
+var updateQuantity = function (evt) {
+  if (evt && evt.type === "keypress" && evt.keyCode !== 13) {
+    return;
+  }
+
+  var isAdding = evt && evt.target.id === "add";
+  var inputEl = document.getElementById("quantity-input");
+  var currentQuantity = parseInt(inputEl.value);
+
+  document.getElementById("add").disabled = false;
+  document.getElementById("subtract").disabled = false;
+
+  // Calculate new quantity
+  var quantity = evt
+    ? isAdding
+      ? currentQuantity + 1
+      : currentQuantity - 1
+    : currentQuantity;
+  // Update number input with new value.
+  inputEl.value = quantity;
+  var amount = config.basePrice / 100;
+  var total = (quantity * amount).toFixed(2);
+
+  document
+    .getElementById("submit")
+    .textContent = `Complete payment $${total}`;
+
+  // Disable the button if the customers hits the max or min
+  if (quantity === MIN_ITEMS) {
+    document.getElementById("subtract").disabled = true;
+  }
+  if (quantity === MAX_ITEMS) {
+    document.getElementById("add").disabled = true;
+  }
+};
+
+/* Attach method */
+Array.from(document.getElementsByClassName("increment-btn")).forEach(
+  (element) => {
+    element.addEventListener("click", updateQuantity);
+  }
+);
+
+/* Handle any errors returns from Checkout  */
+var handleResult = function (result) {
+  if (result.error) {
+    var displayError = document.getElementById("error-message");
+    displayError.textContent = result.error.message;
+  }
+};
+
+// Create a Checkout Session with the selected quantity
+var createCheckoutSession = function () {
+  var inputEl = document.getElementById("quantity-input");
+  var quantity = parseInt(inputEl.value);
+
+  return fetch("/create-checkout-session", {
+    method: "POST",
+    headers: {
+      "Content-Type": "application/json",
+    },
+    body: JSON.stringify({
+      quantity: quantity,
+      // The account selected in the UI and the one that we'll pass as the
+      // transfer_data destination on the server side.
+      account: document.querySelector("#enabled-accounts-select").value,
+    }),
+  }).then(function (result) {
+    return result.json();
+  });
+};
+
+/* Get the accounts list, publishable key and base price */
+fetch("/config")
+  .then(function (result) {
+    return result.json();
+  })
+  .then(function (json) {
+    // If setupAccounts returns false, there are no accounts that can process a payment, so we
+    // won't show the Checkout button.
+    if (setupAccounts(json)) {
+      window.config = json;
+      var stripe = Stripe(config.publicKey);
+      updateQuantity();
+      // Setup event handler to create a Checkout Session on submit.
+      document.querySelector("#submit").addEventListener("click", function (evt) {
+        createCheckoutSession().then(function (data) {
+          stripe
+            .redirectToCheckout({
+              sessionId: data.sessionId,
+            })
+            .then(handleResult);
+        });
+      });
+    }
+  });
+
+/* ------- Account list ------- */
+
+// Fetch 10 most recent accounts from the server. We'll display one of three states in the UI, depending on the
+// accounts list; (1) if you haven't created any accounts, we'll re-direct you to the onboarding guide, (2) if none of
+// of your accounts have charges enabled, we'll display instructions on how to finish the onboarding process, (3)
+// otherwise, we'll display a payment form, as a customer might see it.
+
+// Returns true if there are accounts available to process payments; otherwise returns false.
+var setupAccounts = function(data) {
+  document.querySelector(".spinner").classList.add("hidden");
+
+  var accounts = data.accounts.data;
+
+  // If there are no accounts, display a message pointing to an onboarding guide.
+  if (!accounts.length) {
+    document.querySelector("#no-accounts-section").classList.remove("hidden");
+    return false;
+  }
+
+  var enabledAccounts = accounts.filter((acct) => acct.charges_enabled);
+
+  // If no accounts are enabled, display instructions on how to enable an account. In an actual
+  // application, you should only surface Express dashboard links to your connected account owners,
+  // not to their customers.
+  if (!enabledAccounts.length) {
+    var expressAccounts = accounts.filter((acct) => acct.type == 'express');
+    var hasCustom = !!accounts.filter((acct) => acct.type == 'custom');
+    var hasStandard = !!accounts.filter((acct) => acct.type == 'standard');
+
+    var wrapper = document.querySelector("#disabled-accounts-section");
+    var input = document.querySelector("#disabled-accounts-select");
+    expressAccounts.forEach((acct) => {
+      var element = document.createElement("option");
+      element.setAttribute("value", acct.id);
+      element.innerHTML = acct.email || acct.id;
+      input.appendChild(element)
+    });
+    // Remove the hidden CSS class on one of the sections with instruction on how to finish onboarding
+    // for a given account type.
+    if (expressAccounts) {
+      document.querySelector('#disabled-accounts-form').classList.remove("hidden");
+      wrapper.querySelector('.express').classList.remove("hidden");
+    }
+    else if (hasCustom) {
+      wrapper.querySelector('.custom').classList.remove("hidden");
+    }
+    else if (hasStandard) {
+      wrapper.querySelector('.standard').classList.remove("hidden");
+    }
+    wrapper.classList.remove("hidden");
+    return false;
+  } 
+
+  // If at least one account is enabled, show the account selector and payment form.
+  var wrapper = document.querySelector("#enabled-accounts-section");
+  var input = document.querySelector("#enabled-accounts-select");
+  enabledAccounts.forEach((acct) => {
+    var element = document.createElement("option");
+    element.setAttribute("value", acct.id);
+    element.innerHTML = acct.email || acct.id;
+    input.appendChild(element)
+  });
+  wrapper.classList.remove("hidden");
+  return true;
+};
+
+
+/* ------- Express dashboard ------- */
+
+// When no accounts are enabled, this sample provides a way to log in as
+// an Express account to finish the onboarding process. Here, we set up
+// the event handler to construct the Express dashboard link.
+expressDashboardForm = document.querySelector('#disabled-accounts-form');
+expressDashboardForm.addEventListener(
+  "submit",
+  event => {
+    event.preventDefault();
+    button = expressDashboardForm.querySelector('button');
+    button.setAttribute("disabled", "disabled");
+    button.textContent = "Opening...";
+
+    var url = new URL("/express-dashboard-link", document.baseURI);
+    params = {account_id: document.querySelector("#disabled-accounts-select").value};
+    url.search = new URLSearchParams(params).toString();
+
+    fetch(url, {
+      method: "GET",
+      headers: {
+      "Content-Type": "application/json"
+      }
+    })
+      .then(response => response.json())
+      .then(data => {
+        if (data.url) {
+          window.location = data.url;
+        } else {
+          elmButton.removeAttribute("disabled");
+          elmButton.textContent = "<Something went wrong>";
+          console.log("data", data);
+        }
+      });
+  },
+  false
+);
Index: connect-destination-charge-checkout/client/css/global.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/client/css/global.css b/connect-destination-charge-checkout/client/css/global.css
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/connect-destination-charge-checkout/client/css/global.css	(date 1683905007000)
@@ -0,0 +1,529 @@
+/* Variables */
+:root {
+  --gray-offset: rgba(0, 0, 0, 0.03);
+  --gray-border: rgba(0, 0, 0, 0.15);
+  --gray-light: rgba(0, 0, 0, 0.4);
+  --yellow-mid: rgba(255, 145, 0, 0.7);
+  --yellow-dark: rgba(255, 145, 0, 0.9);
+  --body-color: var(--gray-mid);
+  --headline-color: var(--gray-dark);
+  --accent-color: rgba(255, 145, 0, 0.7);
+  --body-font-family: -apple-system, BlinkMacSystemFont, sans-serif;
+  --radius: 6px;
+  --form-width: 600px;
+}
+
+/* Base */
+* {
+  box-sizing: border-box;
+}
+body {
+  font-family: var(--body-font-family);
+  font-size: 16px;
+  color: var(--body-color);
+  -webkit-font-smoothing: antialiased;
+}
+h1,
+h2,
+h3,
+h4,
+h5,
+h6 {
+  color: var(--body-color);
+  margin-top: 2px;
+  margin-bottom: 4px;
+}
+h1 {
+  font-size: 27px;
+  color: var(--headline-color);
+}
+h4 {
+  font-weight: 500;
+  font-size: 14px;
+  color: var(--gray-light);
+}
+
+/* Layout */
+.sr-root {
+  display: flex;
+  flex-direction: row;
+  width: 100%;
+  max-width: 980px;
+  padding: 48px;
+  align-content: center;
+  justify-content: center;
+  height: auto;
+  min-height: 100vh;
+  margin: 0 auto;
+}
+.sr-header {
+  margin-bottom: 32px;
+}
+.sr-payment-summary {
+  margin-bottom: 20px;
+}
+.sr-main,
+.sr-content {
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+  height: 100%;
+  align-self: center;
+}
+.sr-main {
+  width: var(--form-width);
+}
+.sr-content {
+  padding-left: 48px;
+}
+.sr-header__logo {
+  background-image: var(--logo-image);
+  height: 24px;
+  background-size: contain;
+  background-repeat: no-repeat;
+  width: 100%;
+}
+.sr-legal-text {
+  color: var(--gray-light);
+  text-align: center;
+  font-size: 13px;
+  line-height: 17px;
+  margin-top: 12px;
+}
+.sr-field-error {
+  color: var(--accent-color);
+  text-align: left;
+  font-size: 13px;
+  line-height: 17px;
+  margin-top: 12px;
+}
+
+/* Form */
+.sr-form-row {
+  margin: 16px 0;
+}
+label {
+  font-size: 13px;
+  font-weight: 500;
+  margin-bottom: 8px;
+  display: inline-block;
+}
+
+/* Inputs */
+.sr-input,
+.sr-select,
+input[type="text"],
+input[type="number"] {
+  border: 1px solid var(--gray-border);
+  border-radius: var(--radius);
+  padding: 5px 12px;
+  height: 44px;
+  width: 100%;
+  transition: box-shadow 0.2s ease;
+  background: white;
+  -moz-appearance: none;
+  -webkit-appearance: none;
+  appearance: none;
+  color: #32325d;
+}
+.sr-input:focus,
+input[type="text"]:focus,
+button:focus,
+.focused {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+  z-index: 9;
+}
+.sr-input::placeholder,
+input[type="text"]::placeholder,
+input[type="number"]::placeholder {
+  color: var(--gray-light);
+}
+
+/* Checkbox */
+.sr-checkbox-label {
+  position: relative;
+  cursor: pointer;
+}
+
+.sr-checkbox-label input {
+  opacity: 0;
+  margin-right: 6px;
+}
+
+.sr-checkbox-label .sr-checkbox-check {
+  position: absolute;
+  left: 0;
+  height: 16px;
+  width: 16px;
+  background-color: white;
+  border: 1px solid var(--gray-border);
+  border-radius: 4px;
+  transition: all 0.2s ease;
+}
+
+.sr-checkbox-label input:focus ~ .sr-checkbox-check {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+}
+
+.sr-checkbox-label input:checked ~ .sr-checkbox-check {
+  background-color: var(--accent-color);
+  background-repeat: no-repeat;
+  background-size: 16px;
+  background-position: -1px -1px;
+}
+
+/* Select */
+.sr-select {
+  display: block;
+  height: 44px;
+  margin: 0;
+  background-repeat: no-repeat, repeat;
+  background-position: right 12px top 50%, 0 0;
+  background-size: 0.65em auto, 100%;
+}
+.sr-select:after {
+}
+.sr-select::-ms-expand {
+  display: none;
+}
+.sr-select:hover {
+  cursor: pointer;
+}
+.sr-select:focus {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+}
+.sr-select option {
+  font-weight: 400;
+}
+.sr-select:invalid {
+  color: var(--gray-light);
+  background-opacity: 0.4;
+}
+
+/* Combo inputs */
+.sr-combo-inputs {
+  display: flex;
+  flex-direction: column;
+}
+.sr-combo-inputs input,
+.sr-combo-inputs .sr-select {
+  border-radius: 0;
+  border-bottom: 0;
+}
+.sr-combo-inputs > input:first-child,
+.sr-combo-inputs > .sr-select:first-child {
+  border-radius: var(--radius) var(--radius) 0 0;
+}
+.sr-combo-inputs > input:last-child,
+.sr-combo-inputs > .sr-select:last-child {
+  border-radius: 0 0 var(--radius) var(--radius);
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:last-child input:first-child {
+  border-radius: 0 0 0 var(--radius);
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:last-child input:last-child {
+  border-radius: 0 0 var(--radius) 0;
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:first-child {
+  border-radius: var(--radius) 0 0 0;
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:last-child {
+  border-radius: 0 var(--radius) 0 0;
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:only-child {
+  border-radius: var(--radius) var(--radius) 0 0;
+}
+.sr-combo-inputs-row {
+  width: 100%;
+  display: flex;
+}
+
+.sr-combo-inputs-row > input {
+  width: 100%;
+  border-radius: 0;
+}
+
+.sr-combo-inputs-row > input:first-child:not(:only-child) {
+  border-right: 0;
+}
+
+.sr-combo-inputs-row:not(:first-of-type) .sr-input {
+  border-radius: 0 0 var(--radius) var(--radius);
+}
+
+/* Buttons and links */
+button {
+  background: var(--accent-color);
+  border-radius: var(--radius);
+  color: white;
+  border: 0;
+  padding: 12px 16px;
+  margin-top: 16px;
+  font-weight: 600;
+  cursor: pointer;
+  transition: all 0.2s ease;
+  display: block;
+}
+button:hover {
+  filter: contrast(115%);
+}
+button:active {
+  transform: translateY(0px) scale(0.98);
+  filter: brightness(0.9);
+}
+button:disabled {
+  opacity: 0.5;
+  cursor: none;
+}
+
+.sr-payment-form button,
+.fullwidth {
+  width: 100%;
+}
+
+a {
+  color: var(--accent-color);
+  text-decoration: none;
+  transition: all 0.2s ease;
+}
+
+a:hover {
+  filter: brightness(0.8);
+}
+
+a:active {
+  filter: brightness(0.5);
+}
+
+/* Code block */
+.sr-callout {
+  background: var(--gray-offset);
+  padding: 12px;
+  border-radius: var(--radius);
+  max-height: 200px;
+  overflow: auto;
+}
+code,
+pre {
+  font-family: "SF Mono", "IBM Plex Mono", "Menlo", monospace;
+  font-size: 12px;
+}
+
+/* Stripe Element placeholder */
+.sr-card-element {
+  padding-top: 12px;
+}
+
+/* Responsiveness */
+@media (max-width: 720px) {
+  .sr-root {
+    flex-direction: column;
+    justify-content: flex-start;
+    padding: 48px 20px;
+    min-width: 320px;
+  }
+
+  .sr-header__logo {
+    background-position: center;
+  }
+
+  .sr-payment-summary {
+    text-align: center;
+  }
+
+  .sr-content {
+    display: none;
+  }
+
+  .sr-main {
+    width: 100%;
+  }
+}
+
+.item-image {
+  text-align: center;
+  margin-top: 20px;
+}
+
+/* todo: spinner/processing state, errors, animations */
+
+.spinner,
+.spinner:before,
+.spinner:after {
+  border-radius: 50%;
+}
+.spinner {
+  color: #ffffff;
+  font-size: 22px;
+  text-indent: -99999px;
+  margin: 0px auto;
+  position: relative;
+  width: 20px;
+  height: 20px;
+  box-shadow: inset 0 0 0 2px;
+  -webkit-transform: translateZ(0);
+  -ms-transform: translateZ(0);
+  transform: translateZ(0);
+}
+.spinner:before,
+.spinner:after {
+  position: absolute;
+  content: "";
+}
+.spinner:before {
+  width: 10.4px;
+  height: 20.4px;
+  background: var(--accent-color);
+  border-radius: 20.4px 0 0 20.4px;
+  top: -0.2px;
+  left: -0.2px;
+  -webkit-transform-origin: 10.4px 10.2px;
+  transform-origin: 10.4px 10.2px;
+  -webkit-animation: loading 2s infinite ease 1.5s;
+  animation: loading 2s infinite ease 1.5s;
+}
+.spinner:after {
+  width: 10.4px;
+  height: 10.2px;
+  background: var(--accent-color);
+  border-radius: 0 10.2px 10.2px 0;
+  top: -0.1px;
+  left: 10.2px;
+  -webkit-transform-origin: 0px 10.2px;
+  transform-origin: 0px 10.2px;
+  -webkit-animation: loading 2s infinite ease;
+  animation: loading 2s infinite ease;
+}
+@-webkit-keyframes loading {
+  0% {
+    -webkit-transform: rotate(0deg);
+    transform: rotate(0deg);
+  }
+  100% {
+    -webkit-transform: rotate(360deg);
+    transform: rotate(360deg);
+  }
+}
+@keyframes loading {
+  0% {
+    -webkit-transform: rotate(0deg);
+    transform: rotate(0deg);
+  }
+  100% {
+    -webkit-transform: rotate(360deg);
+    transform: rotate(360deg);
+  }
+}
+
+/* Custom */
+.container {
+  border: 1px solid #e8e8e8;
+  border-radius: 6px;
+  padding: 32px 28px;
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
+  max-width: 400px;
+}
+
+.container .pasha-image-stack {
+  margin-top: 20px;
+}
+
+.container:first-of-type {
+  margin-right: 20px;
+}
+
+.quantity-setter {
+  display: flex;
+  justify-content: center;
+  margin-top: 20px;
+}
+
+.quantity-setter input {
+  border-radius: 0;
+  width: 50px;
+  padding: 0;
+  text-align: center;
+}
+
+.quantity-setter .increment-btn {
+  margin-top: 0;
+  border-radius: 0;
+  border: 1px solid var(--accent-color);
+}
+
+input[type="number"]::-webkit-inner-spin-button,
+input[type="number"]::-webkit-outer-spin-button {
+  -webkit-appearance: none;
+  margin: 0;
+}
+
+/* Animated form */
+
+.sr-root {
+  animation: 0.4s form-in;
+  animation-fill-mode: both;
+  animation-timing-function: ease;
+}
+
+.sr-payment-form .sr-form-row {
+  animation: 0.4s field-in;
+  animation-fill-mode: both;
+  animation-timing-function: ease;
+  transform-origin: 50% 0%;
+}
+
+/* need saas for loop :D  */
+.sr-payment-form .sr-form-row:nth-child(1) {
+  animation-delay: 0;
+}
+.sr-payment-form .sr-form-row:nth-child(2) {
+  animation-delay: 60ms;
+}
+.sr-payment-form .sr-form-row:nth-child(3) {
+  animation-delay: 120ms;
+}
+.sr-payment-form .sr-form-row:nth-child(4) {
+  animation-delay: 180ms;
+}
+.sr-payment-form .sr-form-row:nth-child(5) {
+  animation-delay: 240ms;
+}
+.sr-payment-form .sr-form-row:nth-child(6) {
+  animation-delay: 300ms;
+}
+.hidden {
+  display: none;
+}
+
+@keyframes field-in {
+  0% {
+    opacity: 0;
+    transform: translateY(8px) scale(0.95);
+  }
+  100% {
+    opacity: 1;
+    transform: translateY(0px) scale(1);
+  }
+}
+
+@keyframes form-in {
+  0% {
+    opacity: 0;
+    transform: scale(0.98);
+  }
+  100% {
+    opacity: 1;
+    transform: scale(1);
+  }
+}
Index: connect-destination-charge-checkout/client/css/normalize.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/client/css/normalize.css b/connect-destination-charge-checkout/client/css/normalize.css
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/connect-destination-charge-checkout/client/css/normalize.css	(date 1683905007000)
@@ -0,0 +1,349 @@
+/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
+
+/* Document
+   ========================================================================== */
+
+/**
+ * 1. Correct the line height in all browsers.
+ * 2. Prevent adjustments of font size after orientation changes in iOS.
+ */
+
+ html {
+    line-height: 1.15; /* 1 */
+    -webkit-text-size-adjust: 100%; /* 2 */
+  }
+  
+  /* Sections
+     ========================================================================== */
+  
+  /**
+   * Remove the margin in all browsers.
+   */
+  
+  body {
+    margin: 0;
+  }
+  
+  /**
+   * Render the `main` element consistently in IE.
+   */
+  
+  main {
+    display: block;
+  }
+  
+  /**
+   * Correct the font size and margin on `h1` elements within `section` and
+   * `article` contexts in Chrome, Firefox, and Safari.
+   */
+  
+  h1 {
+    font-size: 2em;
+    margin: 0.67em 0;
+  }
+  
+  /* Grouping content
+     ========================================================================== */
+  
+  /**
+   * 1. Add the correct box sizing in Firefox.
+   * 2. Show the overflow in Edge and IE.
+   */
+  
+  hr {
+    box-sizing: content-box; /* 1 */
+    height: 0; /* 1 */
+    overflow: visible; /* 2 */
+  }
+  
+  /**
+   * 1. Correct the inheritance and scaling of font size in all browsers.
+   * 2. Correct the odd `em` font sizing in all browsers.
+   */
+  
+  pre {
+    font-family: monospace, monospace; /* 1 */
+    font-size: 1em; /* 2 */
+  }
+  
+  /* Text-level semantics
+     ========================================================================== */
+  
+  /**
+   * Remove the gray background on active links in IE 10.
+   */
+  
+  a {
+    background-color: transparent;
+  }
+  
+  /**
+   * 1. Remove the bottom border in Chrome 57-
+   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
+   */
+  
+  abbr[title] {
+    border-bottom: none; /* 1 */
+    text-decoration: underline; /* 2 */
+    text-decoration: underline dotted; /* 2 */
+  }
+  
+  /**
+   * Add the correct font weight in Chrome, Edge, and Safari.
+   */
+  
+  b,
+  strong {
+    font-weight: bolder;
+  }
+  
+  /**
+   * 1. Correct the inheritance and scaling of font size in all browsers.
+   * 2. Correct the odd `em` font sizing in all browsers.
+   */
+  
+  code,
+  kbd,
+  samp {
+    font-family: monospace, monospace; /* 1 */
+    font-size: 1em; /* 2 */
+  }
+  
+  /**
+   * Add the correct font size in all browsers.
+   */
+  
+  small {
+    font-size: 80%;
+  }
+  
+  /**
+   * Prevent `sub` and `sup` elements from affecting the line height in
+   * all browsers.
+   */
+  
+  sub,
+  sup {
+    font-size: 75%;
+    line-height: 0;
+    position: relative;
+    vertical-align: baseline;
+  }
+  
+  sub {
+    bottom: -0.25em;
+  }
+  
+  sup {
+    top: -0.5em;
+  }
+  
+  /* Embedded content
+     ========================================================================== */
+  
+  /**
+   * Remove the border on images inside links in IE 10.
+   */
+  
+  img {
+    border-style: none;
+  }
+  
+  /* Forms
+     ========================================================================== */
+  
+  /**
+   * 1. Change the font styles in all browsers.
+   * 2. Remove the margin in Firefox and Safari.
+   */
+  
+  button,
+  input,
+  optgroup,
+  select,
+  textarea {
+    font-family: inherit; /* 1 */
+    font-size: 100%; /* 1 */
+    line-height: 1.15; /* 1 */
+    margin: 0; /* 2 */
+  }
+  
+  /**
+   * Show the overflow in IE.
+   * 1. Show the overflow in Edge.
+   */
+  
+  button,
+  input { /* 1 */
+    overflow: visible;
+  }
+  
+  /**
+   * Remove the inheritance of text transform in Edge, Firefox, and IE.
+   * 1. Remove the inheritance of text transform in Firefox.
+   */
+  
+  button,
+  select { /* 1 */
+    text-transform: none;
+  }
+  
+  /**
+   * Correct the inability to style clickable types in iOS and Safari.
+   */
+  
+  button,
+  [type="button"],
+  [type="reset"],
+  [type="submit"] {
+    -webkit-appearance: button;
+  }
+  
+  /**
+   * Remove the inner border and padding in Firefox.
+   */
+  
+  button::-moz-focus-inner,
+  [type="button"]::-moz-focus-inner,
+  [type="reset"]::-moz-focus-inner,
+  [type="submit"]::-moz-focus-inner {
+    border-style: none;
+    padding: 0;
+  }
+  
+  /**
+   * Restore the focus styles unset by the previous rule.
+   */
+  
+  button:-moz-focusring,
+  [type="button"]:-moz-focusring,
+  [type="reset"]:-moz-focusring,
+  [type="submit"]:-moz-focusring {
+    outline: 1px dotted ButtonText;
+  }
+  
+  /**
+   * Correct the padding in Firefox.
+   */
+  
+  fieldset {
+    padding: 0.35em 0.75em 0.625em;
+  }
+  
+  /**
+   * 1. Correct the text wrapping in Edge and IE.
+   * 2. Correct the color inheritance from `fieldset` elements in IE.
+   * 3. Remove the padding so developers are not caught out when they zero out
+   *    `fieldset` elements in all browsers.
+   */
+  
+  legend {
+    box-sizing: border-box; /* 1 */
+    color: inherit; /* 2 */
+    display: table; /* 1 */
+    max-width: 100%; /* 1 */
+    padding: 0; /* 3 */
+    white-space: normal; /* 1 */
+  }
+  
+  /**
+   * Add the correct vertical alignment in Chrome, Firefox, and Opera.
+   */
+  
+  progress {
+    vertical-align: baseline;
+  }
+  
+  /**
+   * Remove the default vertical scrollbar in IE 10+.
+   */
+  
+  textarea {
+    overflow: auto;
+  }
+  
+  /**
+   * 1. Add the correct box sizing in IE 10.
+   * 2. Remove the padding in IE 10.
+   */
+  
+  [type="checkbox"],
+  [type="radio"] {
+    box-sizing: border-box; /* 1 */
+    padding: 0; /* 2 */
+  }
+  
+  /**
+   * Correct the cursor style of increment and decrement buttons in Chrome.
+   */
+  
+  [type="number"]::-webkit-inner-spin-button,
+  [type="number"]::-webkit-outer-spin-button {
+    height: auto;
+  }
+  
+  /**
+   * 1. Correct the odd appearance in Chrome and Safari.
+   * 2. Correct the outline style in Safari.
+   */
+  
+  [type="search"] {
+    -webkit-appearance: textfield; /* 1 */
+    outline-offset: -2px; /* 2 */
+  }
+  
+  /**
+   * Remove the inner padding in Chrome and Safari on macOS.
+   */
+  
+  [type="search"]::-webkit-search-decoration {
+    -webkit-appearance: none;
+  }
+  
+  /**
+   * 1. Correct the inability to style clickable types in iOS and Safari.
+   * 2. Change font properties to `inherit` in Safari.
+   */
+  
+  ::-webkit-file-upload-button {
+    -webkit-appearance: button; /* 1 */
+    font: inherit; /* 2 */
+  }
+  
+  /* Interactive
+     ========================================================================== */
+  
+  /*
+   * Add the correct display in Edge, IE 10+, and Firefox.
+   */
+  
+  details {
+    display: block;
+  }
+  
+  /*
+   * Add the correct display in all browsers.
+   */
+  
+  summary {
+    display: list-item;
+  }
+  
+  /* Misc
+     ========================================================================== */
+  
+  /**
+   * Add the correct display in IE 10+.
+   */
+  
+  template {
+    display: none;
+  }
+  
+  /**
+   * Add the correct display in IE 10.
+   */
+  
+  [hidden] {
+    display: none;
+  }
\ No newline at end of file
Index: connect-destination-charge-checkout/server/config.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/server/config.php b/connect-destination-charge-checkout/server/config.php
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/connect-destination-charge-checkout/server/config.php	(date 1683905007000)
@@ -0,0 +1,19 @@
+<?php
+
+if (PHP_SAPI == 'cli-server') {
+  $_SERVER['SCRIPT_NAME'] = '/index.php';
+  $url  = parse_url($_SERVER['REQUEST_URI']);
+
+  $file = getenv('STATIC_DIR') . $url['path'];
+  if (is_file($file)) {
+    $extension = pathinfo($file, PATHINFO_EXTENSION);
+    if ($extension == 'css') {
+      header('Content-Type: text/css');
+    }
+    if ($extension == 'js') {
+      header('Content-Type: text/javascript');
+    }
+    echo file_get_contents($file);
+    exit;
+  }
+}
\ No newline at end of file
Index: modal/connect-onboarding-for-express/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/.gitignore b/modal/connect-onboarding-for-express/.gitignore
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/.gitignore	(date 1683905007000)
@@ -0,0 +1,30 @@
+.env
+.DS_Store
+.vscode/*
+!.vscode/extensions.json
+
+# Node files
+node_modules/
+
+# Ruby files
+Gemfile.lock
+
+# Python files
+__pycache__
+venv
+
+# PHP files
+vendor
+logs
+
+# Java files
+.settings
+target/
+.classpath
+.factorypath
+.project
+
+# Typescript
+dist
+
+**/virtual
\ No newline at end of file
Index: modal/connect-onboarding-for-express/.env.example
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/.env.example b/modal/connect-onboarding-for-express/.env.example
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/.env.example	(date 1683905007000)
@@ -0,0 +1,7 @@
+# Stripe keys
+STRIPE_PUBLISHABLE_KEY=pk_12345
+STRIPE_SECRET_KEY=sk_12345
+STRIPE_WEBHOOK_SECRET=whsec_1234
+
+# Environment variables 
+STATIC_DIR=../../client 
Index: modal/connect-onboarding-for-express/.cli.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/.cli.json b/modal/connect-onboarding-for-express/.cli.json
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/.cli.json	(date 1683905007000)
@@ -0,0 +1,19 @@
+{
+  "name": "connect-onboarding-for-standard",
+  "configureDotEnv": true,
+  "integrations": [
+    {
+      "name": "main",
+      "clients": [
+        "web"
+      ],
+      "servers": [
+        "java",
+        "node",
+        "php",
+        "python",
+        "ruby"
+      ]
+    }
+  ]
+}
Index: modal/connect-onboarding-for-express/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/README.md b/modal/connect-onboarding-for-express/README.md
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/README.md	(date 1683905007000)
@@ -0,0 +1,93 @@
+# Connect Onboarding for Express accounts
+
+This Stripe sample shows you how to use Connect Onboarding for Express for user on-boarding
+with [Stripe Connect](https://stripe.com/connect).
+
+![demo](.readme/demo.png)
+
+## How to run locally
+
+This sample includes 5 server implementations in Node, Ruby, Python, Java, and PHP.
+
+Follow the steps below to run locally.
+
+**1. Clone and configure the sample**
+
+The Stripe CLI is the fastest way to clone and configure a sample to run locally.
+
+**Using the Stripe CLI**
+
+If you haven't already installed the CLI, follow
+the [installation steps](https://github.com/stripe/stripe-cli#installation) in the project README. The CLI is useful for
+cloning samples and locally testing webhooks and Stripe integrations.
+
+In your terminal shell, run the Stripe CLI command to clone the sample:
+
+```
+stripe samples create connect-onboarding-for-express
+```
+
+The CLI will walk you through picking your integration type, server and client languages, and configuring your .env
+config file with your Stripe API keys.
+
+**Installing and cloning manually**
+
+If you do not want to use the Stripe CLI, you can manually clone and configure the sample yourself:
+
+```
+git clone https://github.com/stripe-samples/connect-onboarding-for-express
+```
+
+Copy the .env.example file into a file named .env in the folder of the server you want to use. For example:
+
+```
+cp .env.example server/node/.env
+```
+
+You will need a Stripe account in order to run the demo. Once you set up your account, go to the
+Stripe [developer dashboard](https://stripe.com/docs/development/quickstart#api-keys) to find your API keys.
+
+```
+STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>
+STRIPE_SECRET_KEY=<replace-with-your-secret-key>
+```
+
+`STATIC_DIR` tells the server where to the client files are located and does not need to be modified unless you move the
+server files.
+
+**2. Follow the server instructions on how to run:**
+
+Pick the server language you want and follow the instructions in the server folder README on how to run.
+
+For example, if you want to run the Node server:
+
+```
+cd server/node # there's a README in this folder with instructions
+npm install
+npm start
+```
+
+## FAQ
+
+Q: Why did you pick these frameworks?
+
+A: We chose the most minimal framework to convey the key Stripe calls and concepts you need to understand. These demos
+are meant as an educational tool that helps you roadmap how to integrate Stripe within your own system independent of
+the framework.
+
+## Get support
+
+If you found a bug or want to suggest a new [feature/use case/sample], please [file an issue](../../issues).
+
+If you have questions, comments, or need help with code, we're here to help:
+
+- on [Discord](https://stripe.com/go/developer-chat)
+- on Twitter at [@StripeDev](https://twitter.com/StripeDev)
+- on Stack Overflow at the [stripe-payments](https://stackoverflow.com/tags/stripe-payments/info) tag
+- by [email](mailto:support+github@stripe.com)
+
+Sign up to [stay updated with developer news](https://go.stripe.global/dev-digest).
+
+## Author(s)
+
+[@auchenberg-stripe](https://twitter.com/auchenberg)
Index: modal/connect-onboarding-for-express/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/LICENSE b/modal/connect-onboarding-for-express/LICENSE
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/LICENSE	(date 1683905007000)
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) 2019- Stripe, Inc. (https://stripe.com)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
Index: modal/connect-onboarding-for-express/client/script.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/client/script.js b/modal/connect-onboarding-for-express/client/script.js
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/client/script.js	(date 1683905007000)
@@ -0,0 +1,29 @@
+let elmButton = document.querySelector("#submit");
+
+if (elmButton) {
+  elmButton.addEventListener(
+    "click",
+    e => {
+      elmButton.setAttribute("disabled", "disabled");
+      elmButton.textContent = "Opening...";
+
+      fetch("/onboard-user", {
+        method: "POST",
+        headers: {
+          "Content-Type": "application/json"
+        }
+      })
+        .then(response => response.json())
+        .then(data => {
+          if (data.url) {
+            window.location = data.url;
+          } else {
+            elmButton.removeAttribute("disabled");
+            elmButton.textContent = "<Something went wrong>";
+            console.log("data", data);
+          }
+        });
+    },
+    false
+  );
+}
Index: modal/connect-onboarding-for-express/client/css/global.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/client/css/global.css b/modal/connect-onboarding-for-express/client/css/global.css
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/client/css/global.css	(date 1683905007000)
@@ -0,0 +1,478 @@
+/* Variables */
+:root {
+  --gray-offset: rgba(0, 0, 0, 0.03);
+  --gray-border: rgba(0, 0, 0, 0.15);
+  --gray-light: rgba(0, 0, 0, 0.4);
+  --gray-mid: rgba(0, 0, 0, 0.7);
+  --gray-dark: rgba(0, 0, 0, 0.9);
+  --body-color: var(--gray-mid);
+  --headline-color: var(--gray-dark);
+  --accent-color: #0066f0;
+  --body-font-family: -apple-system, BlinkMacSystemFont, sans-serif;
+  --radius: 6px;
+  --form-width: 343px;
+}
+
+/* Base */
+* {
+  box-sizing: border-box;
+}
+body {
+  font-family: var(--body-font-family);
+  font-size: 16px;
+  color: var(--body-color);
+  -webkit-font-smoothing: antialiased;
+}
+h1,
+h2,
+h3,
+h4,
+h5,
+h6 {
+  color: var(--body-color);
+  margin-top: 2px;
+  margin-bottom: 4px;
+}
+h1 {
+  font-size: 27px;
+  color: var(--headline-color);
+}
+h4 {
+  font-weight: 500;
+  font-size: 14px;
+  color: var(--gray-light);
+}
+
+/* Layout */
+.sr-root {
+  display: flex;
+  flex-direction: row;
+  width: 100%;
+  max-width: 980px;
+  padding: 48px;
+  align-content: center;
+  justify-content: center;
+  height: auto;
+  min-height: 100vh;
+  margin: 0 auto;
+}
+.sr-header {
+  margin-bottom: 32px;
+}
+.sr-payment-summary {
+  margin-bottom: 20px;
+}
+.sr-main,
+.sr-content {
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+  height: 100%;
+  align-self: center;
+}
+.sr-main {
+  width: var(--form-width);
+}
+.sr-content {
+  padding-left: 48px;
+}
+.sr-header__logo {
+  background-image: var(--logo-image);
+  height: 24px;
+  background-size: contain;
+  background-repeat: no-repeat;
+  width: 100%;
+}
+.sr-legal-text {
+  color: var(--gray-light);
+  text-align: center;
+  font-size: 13px;
+  line-height: 17px;
+  margin-top: 12px;
+}
+.sr-field-error {
+  color: var(--accent-color);
+  text-align: left;
+  font-size: 13px;
+  line-height: 17px;
+  margin-top: 12px;
+}
+
+/* Form */
+.sr-form-row {
+  margin: 16px 0;
+}
+label {
+  font-size: 13px;
+  font-weight: 500;
+  margin-bottom: 8px;
+  display: inline-block;
+}
+
+/* Inputs */
+.sr-input,
+.sr-select,
+input[type="text"] {
+  border: 1px solid var(--gray-border);
+  border-radius: var(--radius);
+  padding: 5px 12px;
+  height: 44px;
+  width: 100%;
+  transition: box-shadow 0.2s ease;
+  background: white;
+  -moz-appearance: none;
+  -webkit-appearance: none;
+  appearance: none;
+  color: #32325d;
+}
+.sr-input:focus,
+input[type="text"]:focus,
+button:focus,
+.focused {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+  z-index: 9;
+}
+.sr-input::placeholder,
+input[type="text"]::placeholder {
+  color: var(--gray-light);
+}
+
+/* Checkbox */
+.sr-checkbox-label {
+  position: relative;
+  cursor: pointer;
+}
+
+.sr-checkbox-label input {
+  opacity: 0;
+  margin-right: 6px;
+}
+
+.sr-checkbox-label .sr-checkbox-check {
+  position: absolute;
+  left: 0;
+  height: 16px;
+  width: 16px;
+  background-color: white;
+  border: 1px solid var(--gray-border);
+  border-radius: 4px;
+  transition: all 0.2s ease;
+}
+
+.sr-checkbox-label input:focus ~ .sr-checkbox-check {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+}
+
+.sr-checkbox-label input:checked ~ .sr-checkbox-check {
+  background-color: var(--accent-color);
+  background-repeat: no-repeat;
+  background-size: 16px;
+  background-position: -1px -1px;
+}
+
+/* Select */
+.sr-select {
+  display: block;
+  height: 44px;
+  margin: 0;
+  background-repeat: no-repeat, repeat;
+  background-position: right 12px top 50%, 0 0;
+  background-size: 0.65em auto, 100%;
+}
+.sr-select:after {
+}
+.sr-select::-ms-expand {
+  display: none;
+}
+.sr-select:hover {
+  cursor: pointer;
+}
+.sr-select:focus {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+}
+.sr-select option {
+  font-weight: 400;
+}
+.sr-select:invalid {
+  color: var(--gray-light);
+  background-opacity: 0.4;
+}
+
+/* Combo inputs */
+.sr-combo-inputs {
+  display: flex;
+  flex-direction: column;
+}
+.sr-combo-inputs input,
+.sr-combo-inputs .sr-select {
+  border-radius: 0;
+  border-bottom: 0;
+}
+.sr-combo-inputs > input:first-child,
+.sr-combo-inputs > .sr-select:first-child {
+  border-radius: var(--radius) var(--radius) 0 0;
+}
+.sr-combo-inputs > input:last-child,
+.sr-combo-inputs > .sr-select:last-child {
+  border-radius: 0 0 var(--radius) var(--radius);
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:last-child input:first-child {
+  border-radius: 0 0 0 var(--radius);
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:last-child input:last-child {
+  border-radius: 0 0 var(--radius) 0;
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:first-child {
+  border-radius: var(--radius) 0 0 0;
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:last-child {
+  border-radius: 0 var(--radius) 0 0;
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:only-child {
+  border-radius: var(--radius) var(--radius) 0 0;
+}
+.sr-combo-inputs-row {
+  width: 100%;
+  display: flex;
+}
+
+.sr-combo-inputs-row > input {
+  width: 100%;
+  border-radius: 0;
+}
+
+.sr-combo-inputs-row > input:first-child:not(:only-child) {
+  border-right: 0;
+}
+
+.sr-combo-inputs-row:not(:first-of-type) .sr-input {
+  border-radius: 0 0 var(--radius) var(--radius);
+}
+
+/* Buttons and links */
+button {
+  background: var(--accent-color);
+  border-radius: var(--radius);
+  color: white;
+  border: 0;
+  padding: 12px 16px;
+  margin-top: 16px;
+  font-weight: 600;
+  cursor: pointer;
+  transition: all 0.2s ease;
+  display: block;
+}
+button:hover {
+  filter: contrast(115%);
+}
+button:active {
+  transform: translateY(0px) scale(0.98);
+  filter: brightness(0.9);
+}
+button:disabled {
+  opacity: 0.5;
+  cursor: none;
+}
+
+.sr-payment-form button,
+.fullwidth {
+  width: 100%;
+}
+
+a {
+  color: var(--accent-color);
+  text-decoration: none;
+  transition: all 0.2s ease;
+}
+
+a:hover {
+  filter: brightness(0.8);
+}
+
+a:active {
+  filter: brightness(0.5);
+}
+
+/* Code block */
+.sr-callout {
+  background: var(--gray-offset);
+  padding: 12px;
+  border-radius: var(--radius);
+  max-height: 200px;
+  overflow: auto;
+}
+code,
+pre {
+  font-family: "SF Mono", "IBM Plex Mono", "Menlo", monospace;
+  font-size: 12px;
+}
+
+/* Stripe Element placeholder */
+.sr-card-element {
+  padding-top: 12px;
+}
+
+/* Responsiveness */
+@media (max-width: 720px) {
+  .sr-root {
+    flex-direction: column;
+    justify-content: flex-start;
+    padding: 48px 20px;
+    min-width: 320px;
+  }
+
+  .sr-header__logo {
+    background-position: center;
+  }
+
+  .sr-payment-summary {
+    text-align: center;
+  }
+
+  .sr-content {
+    display: none;
+  }
+
+  .sr-main {
+    width: 100%;
+  }
+}
+
+/* todo: spinner/processing state, errors, animations */
+
+.spinner,
+.spinner:before,
+.spinner:after {
+  border-radius: 50%;
+}
+.spinner {
+  color: #ffffff;
+  font-size: 22px;
+  text-indent: -99999px;
+  margin: 0px auto;
+  position: relative;
+  width: 20px;
+  height: 20px;
+  box-shadow: inset 0 0 0 2px;
+  -webkit-transform: translateZ(0);
+  -ms-transform: translateZ(0);
+  transform: translateZ(0);
+}
+.spinner:before,
+.spinner:after {
+  position: absolute;
+  content: "";
+}
+.spinner:before {
+  width: 10.4px;
+  height: 20.4px;
+  background: var(--accent-color);
+  border-radius: 20.4px 0 0 20.4px;
+  top: -0.2px;
+  left: -0.2px;
+  -webkit-transform-origin: 10.4px 10.2px;
+  transform-origin: 10.4px 10.2px;
+  -webkit-animation: loading 2s infinite ease 1.5s;
+  animation: loading 2s infinite ease 1.5s;
+}
+.spinner:after {
+  width: 10.4px;
+  height: 10.2px;
+  background: var(--accent-color);
+  border-radius: 0 10.2px 10.2px 0;
+  top: -0.1px;
+  left: 10.2px;
+  -webkit-transform-origin: 0px 10.2px;
+  transform-origin: 0px 10.2px;
+  -webkit-animation: loading 2s infinite ease;
+  animation: loading 2s infinite ease;
+}
+@-webkit-keyframes loading {
+  0% {
+    -webkit-transform: rotate(0deg);
+    transform: rotate(0deg);
+  }
+  100% {
+    -webkit-transform: rotate(360deg);
+    transform: rotate(360deg);
+  }
+}
+@keyframes loading {
+  0% {
+    -webkit-transform: rotate(0deg);
+    transform: rotate(0deg);
+  }
+  100% {
+    -webkit-transform: rotate(360deg);
+    transform: rotate(360deg);
+  }
+}
+
+/* Animated form */
+
+.sr-root {
+  animation: 0.4s form-in;
+  animation-fill-mode: both;
+  animation-timing-function: ease;
+}
+
+.sr-payment-form .sr-form-row {
+  animation: 0.4s field-in;
+  animation-fill-mode: both;
+  animation-timing-function: ease;
+  transform-origin: 50% 0%;
+}
+
+/* need saas for loop :D  */
+.sr-payment-form .sr-form-row:nth-child(1) {
+  animation-delay: 0;
+}
+.sr-payment-form .sr-form-row:nth-child(2) {
+  animation-delay: 60ms;
+}
+.sr-payment-form .sr-form-row:nth-child(3) {
+  animation-delay: 120ms;
+}
+.sr-payment-form .sr-form-row:nth-child(4) {
+  animation-delay: 180ms;
+}
+.sr-payment-form .sr-form-row:nth-child(5) {
+  animation-delay: 240ms;
+}
+.sr-payment-form .sr-form-row:nth-child(6) {
+  animation-delay: 300ms;
+}
+.hidden {
+  display: none;
+}
+
+@keyframes field-in {
+  0% {
+    opacity: 0;
+    transform: translateY(8px) scale(0.95);
+  }
+  100% {
+    opacity: 1;
+    transform: translateY(0px) scale(1);
+  }
+}
+
+@keyframes form-in {
+  0% {
+    opacity: 0;
+    transform: scale(0.98);
+  }
+  100% {
+    opacity: 1;
+    transform: scale(1);
+  }
+}
Index: modal/connect-onboarding-for-express/client/css/normalize.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/client/css/normalize.css b/modal/connect-onboarding-for-express/client/css/normalize.css
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/client/css/normalize.css	(date 1683905007000)
@@ -0,0 +1,349 @@
+/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
+
+/* Document
+   ========================================================================== */
+
+/**
+ * 1. Correct the line height in all browsers.
+ * 2. Prevent adjustments of font size after orientation changes in iOS.
+ */
+
+ html {
+    line-height: 1.15; /* 1 */
+    -webkit-text-size-adjust: 100%; /* 2 */
+  }
+  
+  /* Sections
+     ========================================================================== */
+  
+  /**
+   * Remove the margin in all browsers.
+   */
+  
+  body {
+    margin: 0;
+  }
+  
+  /**
+   * Render the `main` element consistently in IE.
+   */
+  
+  main {
+    display: block;
+  }
+  
+  /**
+   * Correct the font size and margin on `h1` elements within `section` and
+   * `article` contexts in Chrome, Firefox, and Safari.
+   */
+  
+  h1 {
+    font-size: 2em;
+    margin: 0.67em 0;
+  }
+  
+  /* Grouping content
+     ========================================================================== */
+  
+  /**
+   * 1. Add the correct box sizing in Firefox.
+   * 2. Show the overflow in Edge and IE.
+   */
+  
+  hr {
+    box-sizing: content-box; /* 1 */
+    height: 0; /* 1 */
+    overflow: visible; /* 2 */
+  }
+  
+  /**
+   * 1. Correct the inheritance and scaling of font size in all browsers.
+   * 2. Correct the odd `em` font sizing in all browsers.
+   */
+  
+  pre {
+    font-family: monospace, monospace; /* 1 */
+    font-size: 1em; /* 2 */
+  }
+  
+  /* Text-level semantics
+     ========================================================================== */
+  
+  /**
+   * Remove the gray background on active links in IE 10.
+   */
+  
+  a {
+    background-color: transparent;
+  }
+  
+  /**
+   * 1. Remove the bottom border in Chrome 57-
+   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
+   */
+  
+  abbr[title] {
+    border-bottom: none; /* 1 */
+    text-decoration: underline; /* 2 */
+    text-decoration: underline dotted; /* 2 */
+  }
+  
+  /**
+   * Add the correct font weight in Chrome, Edge, and Safari.
+   */
+  
+  b,
+  strong {
+    font-weight: bolder;
+  }
+  
+  /**
+   * 1. Correct the inheritance and scaling of font size in all browsers.
+   * 2. Correct the odd `em` font sizing in all browsers.
+   */
+  
+  code,
+  kbd,
+  samp {
+    font-family: monospace, monospace; /* 1 */
+    font-size: 1em; /* 2 */
+  }
+  
+  /**
+   * Add the correct font size in all browsers.
+   */
+  
+  small {
+    font-size: 80%;
+  }
+  
+  /**
+   * Prevent `sub` and `sup` elements from affecting the line height in
+   * all browsers.
+   */
+  
+  sub,
+  sup {
+    font-size: 75%;
+    line-height: 0;
+    position: relative;
+    vertical-align: baseline;
+  }
+  
+  sub {
+    bottom: -0.25em;
+  }
+  
+  sup {
+    top: -0.5em;
+  }
+  
+  /* Embedded content
+     ========================================================================== */
+  
+  /**
+   * Remove the border on images inside links in IE 10.
+   */
+  
+  img {
+    border-style: none;
+  }
+  
+  /* Forms
+     ========================================================================== */
+  
+  /**
+   * 1. Change the font styles in all browsers.
+   * 2. Remove the margin in Firefox and Safari.
+   */
+  
+  button,
+  input,
+  optgroup,
+  select,
+  textarea {
+    font-family: inherit; /* 1 */
+    font-size: 100%; /* 1 */
+    line-height: 1.15; /* 1 */
+    margin: 0; /* 2 */
+  }
+  
+  /**
+   * Show the overflow in IE.
+   * 1. Show the overflow in Edge.
+   */
+  
+  button,
+  input { /* 1 */
+    overflow: visible;
+  }
+  
+  /**
+   * Remove the inheritance of text transform in Edge, Firefox, and IE.
+   * 1. Remove the inheritance of text transform in Firefox.
+   */
+  
+  button,
+  select { /* 1 */
+    text-transform: none;
+  }
+  
+  /**
+   * Correct the inability to style clickable types in iOS and Safari.
+   */
+  
+  button,
+  [type="button"],
+  [type="reset"],
+  [type="submit"] {
+    -webkit-appearance: button;
+  }
+  
+  /**
+   * Remove the inner border and padding in Firefox.
+   */
+  
+  button::-moz-focus-inner,
+  [type="button"]::-moz-focus-inner,
+  [type="reset"]::-moz-focus-inner,
+  [type="submit"]::-moz-focus-inner {
+    border-style: none;
+    padding: 0;
+  }
+  
+  /**
+   * Restore the focus styles unset by the previous rule.
+   */
+  
+  button:-moz-focusring,
+  [type="button"]:-moz-focusring,
+  [type="reset"]:-moz-focusring,
+  [type="submit"]:-moz-focusring {
+    outline: 1px dotted ButtonText;
+  }
+  
+  /**
+   * Correct the padding in Firefox.
+   */
+  
+  fieldset {
+    padding: 0.35em 0.75em 0.625em;
+  }
+  
+  /**
+   * 1. Correct the text wrapping in Edge and IE.
+   * 2. Correct the color inheritance from `fieldset` elements in IE.
+   * 3. Remove the padding so developers are not caught out when they zero out
+   *    `fieldset` elements in all browsers.
+   */
+  
+  legend {
+    box-sizing: border-box; /* 1 */
+    color: inherit; /* 2 */
+    display: table; /* 1 */
+    max-width: 100%; /* 1 */
+    padding: 0; /* 3 */
+    white-space: normal; /* 1 */
+  }
+  
+  /**
+   * Add the correct vertical alignment in Chrome, Firefox, and Opera.
+   */
+  
+  progress {
+    vertical-align: baseline;
+  }
+  
+  /**
+   * Remove the default vertical scrollbar in IE 10+.
+   */
+  
+  textarea {
+    overflow: auto;
+  }
+  
+  /**
+   * 1. Add the correct box sizing in IE 10.
+   * 2. Remove the padding in IE 10.
+   */
+  
+  [type="checkbox"],
+  [type="radio"] {
+    box-sizing: border-box; /* 1 */
+    padding: 0; /* 2 */
+  }
+  
+  /**
+   * Correct the cursor style of increment and decrement buttons in Chrome.
+   */
+  
+  [type="number"]::-webkit-inner-spin-button,
+  [type="number"]::-webkit-outer-spin-button {
+    height: auto;
+  }
+  
+  /**
+   * 1. Correct the odd appearance in Chrome and Safari.
+   * 2. Correct the outline style in Safari.
+   */
+  
+  [type="search"] {
+    -webkit-appearance: textfield; /* 1 */
+    outline-offset: -2px; /* 2 */
+  }
+  
+  /**
+   * Remove the inner padding in Chrome and Safari on macOS.
+   */
+  
+  [type="search"]::-webkit-search-decoration {
+    -webkit-appearance: none;
+  }
+  
+  /**
+   * 1. Correct the inability to style clickable types in iOS and Safari.
+   * 2. Change font properties to `inherit` in Safari.
+   */
+  
+  ::-webkit-file-upload-button {
+    -webkit-appearance: button; /* 1 */
+    font: inherit; /* 2 */
+  }
+  
+  /* Interactive
+     ========================================================================== */
+  
+  /*
+   * Add the correct display in Edge, IE 10+, and Firefox.
+   */
+  
+  details {
+    display: block;
+  }
+  
+  /*
+   * Add the correct display in all browsers.
+   */
+  
+  summary {
+    display: list-item;
+  }
+  
+  /* Misc
+     ========================================================================== */
+  
+  /**
+   * Add the correct display in IE 10+.
+   */
+  
+  template {
+    display: none;
+  }
+  
+  /**
+   * Add the correct display in IE 10.
+   */
+  
+  [hidden] {
+    display: none;
+  }
\ No newline at end of file
Index: modal/connect-onboarding-for-express/server/server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/server/server.py b/modal/connect-onboarding-for-express/server/server.py
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/server/server.py	(date 1683905007000)
@@ -0,0 +1,71 @@
+#! /usr/bin/env python3.6
+
+"""
+server.py
+Stripe Sample.
+Python 3.6 or newer required.
+"""
+
+import os
+
+import stripe
+from dotenv import load_dotenv, find_dotenv
+from flask import Flask, jsonify, render_template, redirect, request, session
+
+# Setup Stripe python client library
+load_dotenv(find_dotenv())
+stripe.api_key = os.getenv('STRIPE_SECRET_KEY')
+stripe.api_version = os.getenv('STRIPE_API_VERSION', '2019-12-03')
+
+static_dir = str(os.path.abspath(os.path.join(__file__, "..", os.getenv("STATIC_DIR"))))
+app = Flask(__name__, static_folder=static_dir,
+            static_url_path="", template_folder=static_dir)
+
+# Set the secret key to some random bytes. Keep this really secret!
+# This enables Flask sessions.
+app.secret_key = b'_5#y2L"F4Q8z\n\xec]/'
+
+
+@app.route('/', methods=['GET'])
+def get_example():
+    return render_template('index.html')
+
+
+@app.route('/onboard-user', methods=['POST'])
+def onboard_user():
+    account = stripe.Account.create(type='express')
+    # Store the account ID.
+    session['account_id'] = account.id
+
+    origin = request.headers['origin']
+    account_link_url = _generate_account_link(account.id, origin)
+    try:
+        return jsonify({'url': account_link_url})
+    except Exception as e:
+        return jsonify(error=str(e)), 403
+
+
+@app.route('/onboard-user/refresh', methods=['GET'])
+def onboard_user_refresh():
+    if 'account_id' not in session:
+        return redirect('/')
+
+    account_id = session['account_id']
+
+    origin = ('https://' if request.is_secure else 'http://') + request.headers['host']
+    account_link_url = _generate_account_link(account_id, origin)
+    return redirect(account_link_url)
+
+
+def _generate_account_link(account_id, origin):
+    account_link = stripe.AccountLink.create(
+        type='account_onboarding',
+        account=account_id,
+        refresh_url=f'{origin}/onboard-user/refresh',
+        return_url=f'{origin}/success.html',
+    )
+    return account_link.url
+
+
+if __name__ == '__main__':
+    app.run(port=4242)
Index: modal/connect-onboarding-for-express/server/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/server/README.md b/modal/connect-onboarding-for-express/server/README.md
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/server/README.md	(date 1683905007000)
@@ -0,0 +1,38 @@
+# Name of sample
+
+## Requirements
+
+* Python 3.6+
+* pipenv
+* [Configured .env file](../README.md)
+
+## How to run
+
+1. Create and activate a new virtual environment
+
+```sh
+# If you don't have pipenv installed, install it
+pip install pipenv
+# Run `pipenv install` to install requirements
+pipenv install
+```
+
+3. Export and run the application
+
+**On Linux / Unix / MacOS**
+
+```
+pipenv shell
+export FLASK_APP=server.py
+python3 -m flask run --port=4242
+```
+
+**On Windows** (PowerShell)
+
+```
+pipenv shell
+$env:FLASK_APP=“server.py"
+python3 -m flask run --port=4242
+```
+
+4. Go to `localhost:4242` in your browser to see the demo
\ No newline at end of file
Index: This property cannot be expanded (100 000 000 ).
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/This property cannot be expanded (100 000 000 ). b/This property cannot be expanded (100 000 000 ).
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/This property cannot be expanded (100 000 000 ).	(date 1683905007000)
@@ -0,0 +1,1353 @@
+https://webtechnicom.net
+
+
+
+ation, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "bash: created:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "id": "fa_123",
+  "country": "US",
+  "supported_currencies": ["usd"],
+  // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+      bash: id:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "country": "US",
+  "supported_currencies": ["usd"],
+  // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldbash: country:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "supported_currencies": ["usd"],
+  // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  bash: supported_currencies:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   // Arrays of active, pending and restricted features summarize the status of all requested features
+  "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `statusbash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "active_features": ["financial_addresses.aba", "deposit_insurance"],
+  "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "stabash: active_features:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "pending_features": ["inbound_transfers.ach"],
+  "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closbash: pending_features:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+  "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the Finbash: restricted_features:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "balance": {
+    "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount wabash: balance:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "cash": {"usd": 9000},
+    "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - accounbash: cash:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      bash: inbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons"bash: outbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons": []
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+bash: financial_addresses.aba: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "financial_addresses": [
+bash: financial_addresses:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     {
+>       "type": "aba",
+>       "supported_networks": ["ach", "domestic_wire_us"],
+>       "aba": {
+>         "account_number_last4": "7890",
+>         // Use the expand[] parameter to view the `account_number` field hidden by default
+>         "account_number": "1234567890",
+>         "routing_number": "000000001",
+>         "bank_name": "Goldman Sachs"
+>       }
+bash: type:: command not found
+bash: supported_networks:: command not found
+bash: aba:: command not found
+bash: account_number_last4:: command not found
+bash: account_number: command not found
+bash: //: is a directory
+bash: account_number:: command not found
+bash: routing_number:: command not found
+bash: bank_name:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   ],
+bash: ],: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "livemode": true,
+bash: livemode:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // Financial accounts begin in the "open" state, but can be closed
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   // `status_details.closed` is populated once a financial account is closed
+bash: status_details.closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "status": "open",
+bash: status:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "status_details": {
+bash: status_details:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     // `closed` is null if financial account is not closed
+bash: closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$     "closed": {
+bash: closed:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$       // List of one or more reasons why the FinancialAccount was closed:
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - account_rejected
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - clos      // - clos      // - clos 
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       "reasons": []
+bash: reasons:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // User-defined metadata
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "metadata": {},
+bash: metadata:: command not found
+(base) iMac-de-Guido : stripe treasury financial_accounts list
+ (Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" 
+
+Copier
+{
+"error": {
+"message"
+: 
+"This property cannot be expanded (100 000 000 )."
+,
+"request_log_url"
+: 
+"https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+,
+"type"
+: 
+"invalid_request_error"
+,
+},
+}
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - accounbash: cash:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "inbound_pending": {"usd": 0},
+    "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      bash: inbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "outbound_pending": {"usd": 1000}
+  },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons"bash: outbound_pending:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+  // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+  "financial_addresses": [
+    {
+      "type": "aba",
+      "supported_networks": ["ach", "domestic_wire_us"],
+      "aba": {
+        "account_number_last4": "7890",
+        // Use the expand[] parameter to view the `account_number` field hidden by default
+        "account_number": "1234567890",
+        "routing_number": "000000001",
+        "bank_name": "Goldman Sachs"
+      }
+    }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_details.closed` is populated once a financial account is closed
+  "status": "open",
+  "status_details": {
+    // `closed` is null if financial account is not closed
+    "closed": {
+      // List of one or more reasons why the FinancialAccount was closed:
+      // - account_rejected
+      // - clos      // - clos      // - clos 
+      "reasons": []
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+bash: financial_addresses.aba: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "financial_addresses": [
+bash: financial_addresses:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     {
+>       "type": "aba",
+>       "supported_networks": ["ach", "domestic_wire_us"],
+>       "aba": {
+>         "account_number_last4": "7890",
+>         // Use the expand[] parameter to view the `account_number` field hidden by default
+>         "account_number": "1234567890",
+>         "routing_number": "000000001",
+>         "bank_name": "Goldman Sachs"
+>       }
+bash: type:: command not found
+bash: supported_networks:: command not found
+bash: aba:: command not found
+bash: account_number_last4:: command not found
+bash: account_number: command not found
+bash: //: is a directory
+bash: account_number:: command not found
+bash: routing_number:: command not found
+bash: bank_name:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   ],
+bash: ],: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "livemode": true,
+bash: livemode:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // Financial accounts begin in the "open" state, but can be closed
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   // `status_details.closed` is populated once a financial account is closed
+bash: status_details.closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "status": "open",
+bash: status:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "status_details": {
+bash: status_details:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     // `closed` is null if financial account is not closed
+bash: closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$     "closed": {
+bash: closed:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$       // List of one or more reasons why the FinancialAccount was closed:
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - account_rejected
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - clos      // - clos      // - clos 
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       "reasons": []
+bash: reasons:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // User-defined metadata
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "metadata": {},
+bash: metadata:: command not found
+(base) iMac-de-Guido stripe treasury financial_accounts retrieve {{FINANCIAL_ACCOUNT_ID}}
+bash: }stripe: command not found
+(base) iMac-de-Guid {
+>   "object": "treasury.financial_account",
+>   "created": 1612927106,
+>   "id": "fa_123",
+>   "country": "US",
+>   "supported_currencies": ["usd"],
+>   // Arrays of active, pending and restricted features summarize the status of all requested features
+>   "active_features": ["financial_addresses.aba", "deposit_insurance"],
+>   "pending_features": ["inbound_transfers.ach"],
+>   "restricted_features": ["intra_stripe_flows", "outbound_payments.ach", "outbound_payments.us_domestic_wire"],
+>   "balance": {
+>     "cash": {"usd": 9000},
+>     "inbound_pending": {"usd": 0},
+>     "outbound_pending": {"usd": 1000}
+>   },
+>   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see "Activating features"
+>   "financial_addresses": [
+>     {
+>       "type": "aba",
+>       "supported_networks": ["ach", "domestic_wire_us"],
+>       "aba": {
+>         "account_number_last4": "7890",
+>         // Use the expand[] parameter to view the `account_number` field hidden by default
+>         "account_number": "1234567890",
+>         "routing_number": "000000001",
+>         "bank_name": "Goldman Sachs"
+>       }
+>     }
+  ],
+  "livemode": true,
+
+  // Financial accounts begin in the "open" state, but can be closed
+  // `status_detailsbash: object:: command not found
+bash: created:: command not found
+closed
+  "status": "open",
+  "status_details": {
+ bash: id:: command not found
+bash: country:: command not found
+   // `closed` is null if financial account is notbash: supported_currencies:: command not found
+ closed
+    "closed": {
+      // List of one or mobash: //: is a directory
+bash: active_features:: command not found
+bash: pending_features:: command not found
+re reasons why the FinancialAccount was closed:
+  bash: restricted_features:: command not found
+bash: balance:: command not found
+bash: cash:: command not found
+    // - account_rejected
+      // - closed_by_plabash: inbound_pending:: command not found
+bash: outbound_pending:: command not found
+bash: },: command not found
+tform
+      // - other
+      "reasons": []
+    }
+ bash: financial_addresses.aba: command not found
+bash: //: is a directory
+ },
+
+  // User-defined metadata
+  "metadata": {},
+bash: financial_addresses:: command not found
+bash: type:: command not found
+bash: supported_networks:: command not found
+}bash: aba:: command not found
+bash: account_number_last4:: command not found
+bash: account_number: command not found
+bash: //: is a directory
+bash: account_number:: command not found
+bash: routing_number:: command not found
+bash: bank_name:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   ],
+bash: ],: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "livemode": true,
+bash: livemode:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // Financial accounts begin in the "open" state, but can be closed
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   // `status_details.closed` is populated once a financial account is closed
+bash: status_details.closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "status": "open",
+bash: status:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "status_details": {
+bash: status_details:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     // `closed` is null if financial account is not closed
+bash: closed: command not found
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$     "closed": {
+bash: closed:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$       // List of one or more reasons why the FinancialAccount was closed:
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - account_rejected
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - closed_by_platform
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       // - other
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$       "reasons": []
+bash: reasons:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$   },
+bash: },: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$   // User-defined metadata
+bash: //: is a directory
+(base) iMac-de-Guido:identity-main webtechnicom$   "metadata": {},
+bash: metadata:: command not found
+(base) iMac-de-Guid{
+  "error": {
+    "message": "This property cannot be expanded (100 000 000 ).",
+    "request_log_url": "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270",
+    "type": "invalid_request_error"
+  }
+}bash: }{: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   "error": {
+bash: error:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "message": "This property cannot be expanded (100 000 000 ).",
+bash: message:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "request_log_url": "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270",
+bash: request_log_url:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$     "type": "invalid_request_error"
+bash: type:: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$   }
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guid(Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" 
+bash: syntax error near unexpected token `}'
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$ Copier
+{
+"error": {
+"message"
+: 
+"This property cannot be expanded (100 000 000 )."
+,
+"request_log_url"
+: 
+"https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+,
+"type"
+: 
+"invalid_request_error"
+,
+},
+}bash: Copier: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ {
+> "error": {
+> "message"
+> : 
+> "This property cannot be expanded (100 000 000 )."
+> ,
+> "request_log_url"
+> : 
+> "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+> ,
+> "type"
+> : 
+> "invalid_request_error"
+> ,
+> },
+> }(Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" 
+bash: syntax error near unexpected token `('
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$ Copier
+{
+"error": {
+"message"
+: 
+"This property cannot be expanded (100 000 000 )."
+,
+"request_log_url"
+: 
+"https://dashboard.stripe.com/test/logsbash: Copier: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ {
+> "error": {
+> "message"
+> : 
+> "This property cannot be expanded (100 000 000 )."
+> ,
+> "request_log_url"
+> : 
+> "https://dashboard.stripe.com/test/logs/req_Qu61m6PdRB3MRe?t=1683844270"
+> ,
+> "type"
+> : 
+> "invalid_request_error"
+> ,
+> },
+> }(Atlas Account) $ stripe treasury financial_accounts retrieve {{FINANCIAL_ACCOUNT_ID}}STEVE ALEXANDRE NAGLE CH68 06300506329514556 
+bash: syntax error near unexpected token `('
+(base) iMac-de-Guido:identity-main webtechnicom$ Wrong number of arguments passed. Expected arguments: financial_account
+(Atlas Account) $ 5354456210031493 10/25 *** 
+(Atlas Account) $ CH68 0630 0506 3295 1455 6 
+(Atlas Account) $ 5406 5900 0268 2713 03/25 *** 
+(Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS 
+(Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS bash: Wrong: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5354456210031493 10/25 *** 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ CH68 0630 0506 3295 1455 6 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5406 5900 0268 2713 03/25 *** 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ (Atlas Account) $ 5406 5900 0268 2713 03/25 *** UBS 
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ $payload
+(base) iMac-de-Guido:identity-main webtechnicom$ payment completed 
+bash: payment: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $payload completed
+bash: completed: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $load
+(base) iMac-de-Guido:identity-main webtechnicom$ $completed
+(base) iMac-de-Guido:identity-main webtechnicom$ $payd $100 000 000 00 € $completed
+bash: 00: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $payd $10 000 000 .oo€$in full
+bash: 0: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ payment completed 
+bash: payment: command not found
+(base) iMac-de-Guido:identity-main webtechnicom$ $payment$completed
+(base) iMac-de-Guid(Atlas Account) $ stripe treasury financial_accounts retrieve accept -d "expand[0]=100 000 000 .00 €" $payd in fulled
+bash: syntax error near unexpected token `$'
+(base) iMac-de-Guido:identity-main webtechnicom$ $payload
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+(base) iMac-de-Guido:identity-main webtechnicom$ 
+tures": [],
+>       "restricted_features": [],
+>       "status": "open",
+>       "status_details": {
+>         "closed": null
+>       },
+>       "supported_currencies": [
+>         "usd"
+>       ]
+>     },
+>     {...},
+>     {...}
+>   ]
+> }{
+>   "object": "treasury.financial_account_features",
+>   "card_issuing": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "deposit_insurance": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "financial_addresses": {
+>     "aba": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "inbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "intra_stripe_flows": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "outbound_payments": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "outbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   }
+> }stripe treasury financial_account_features update fa_1N6j1wBRCd7whSqPbNzR5avB \
+>   -d "card_issuing[requested]"=true
+> {
+>   "object": "treasury.financial_account_features",
+>   "deposit_insurance": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "financial_addresses": {
+>     "aba": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "inbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "intra_stripe_flows": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "outbound_payments": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "outbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   }
+> }stripe treasury features retrieve fa_1N6j1wBRCd7whSqPbNzR5avB
+> {
+>   "object": "treasury.financial_account_features",
+>   "card_issuing": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "deposit_insurance": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "financial_addresses": {
+>     "aba": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "inbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "intra_stripe_flows": {
+>     "requested": true,
+>     "status": "active",
+>     "status_details": []
+>   },
+>   "outbound_payments": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "outbound_transfers": {
+>     "ach": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     },
+>     "us_domestic_wire": {
+>       "requested": true,
+>       "status": "active",
+>       "status_details": []
+>     }
+>   },
+>   "id": "fa_1N6j1wBRCd7whSqPbNzR5avB"
+> }{
+>   "id": "trxn_1N6j5kBRCd7whSqPIXYlJTQN",
+>   "object": "treasury.transaction",
+>   "amount": -100,
+>   "balance_impact": {
+>     "cash": -100,
+>     "inbound_pending": 0,
+>     "outbound_pending": 100
+>   },
+>   "created": 1683848412,
+>   "currency": "usd",
+>   "description": "Jane Austen (6789) | Outbound transfer | transfer",
+>   "financial_account": "fa_1N6j5kBRCd7whSqPSueSHTWs",
+>   "flow": "obt_1N6j5kBRCd7whSqPiatcSEyn",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "status": "open",
+>   "status_transitions": {
+>     "posted_at": null,
+>     "void_at": null
+>   }
+>                     // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:
+  }
+
+> # Please enter the commit message for your changes. Lines starting
+> # with '#' will be ignored, and an empty message aborts the commit.
+> #
+> # On branch master
+> # Your branch is up to date with 'origin/master'.
+> #
+> # Changes to be committed:
+> #new file:   ...]
+> #new file:   .idea/.gitignore
+> #new file:   .idea/codeStyles/Project.xml
+> #new file:   .idea/codeStyles/codeStyleConfig.xml
+> #new file:   .idea/identity-main.iml
+> #new file:   .idea/inspectionProfiles/Project_Default.xml
+> #new file:   .idea/inspectionProfiles/profiles_settings.xml
+> #new file:   .idea/misc.xml
+> #new file:   .idea/modules.xml
+> #new file:   .idea/vcs.xml
+> #modified:   README.md
+> #new file:   YouTrack_Server_TLS.pem
+> #new file:   checkout.css
+> #new file:   checkout.html
+> #new file:   checkout.js
+> #new file:   codiga.yml
+> #new file:   connect-destination-charge-checkout/.cli.json
+> #new file:   connect-destination-charge-checkout/.env.example
+> #new file:   connect-destination-charge-checkout/.gitignore
+> #new file:   connect-destination-charge-checkout/LICENSE
+> #new file:   connect-destination-charge-checkout/README.md
+> #new file:   connect-destination-charge-checkout/client/canceled.html
+> #new file:   connect-destination-charge-checkout/client/css/global.css
+> #new file:   connect-destination-charge-checkout/client/css/normalize.css
+> #new file:   connect-destination-charge-checkout/client/favicon.ico
+> #new file:   connect-destination-charge-checkout/client/guitar.png
+> #new file:   connect-destination-charge-checkout/client/index.html
+> #new file:   connect-destination-charge-checkout/client/script.js
+#       new file:   connect-destination-charge-checkout/client/succes> #new file:   connect-destination-charge-checkout/client/success.html
+> #new file:   connect-destination-charge-checkout/server/.htaccess
+> #new file:   connect-destination-charge-checkout/server/README.md
+> #new file:   connect-destination-charge-checkout/server/composer.json
+> #new file:   connect-destination-charge-checkout/server/config.php
+> #new file:   connect-destination-charge-checkout/server/index.php
+> #new file:   e
+> #new file:   modal/connect-onboarding-for-express/.cli.json
+> #new file:   modal/connect-onboarding-for-express/.env.example
+> #new file:   modal/connect-onboarding-for-express/.gitignore
+> #new file:   modal/connect-onboarding-for-express/LICENSE
+> #new file:   modal/connect-onboarding-for-express/README.md
+> #new file:   modal/connect-onboarding-for-express/client/css/global.css
+> #new file:   modal/connect-onboarding-for-express/client/css/normalize.css
+> #new file:   modal/connect-onboarding-for-express/client/favicon.ico
+> #new file:   modal/connect-onboarding-for-express/client/index.html
+> #new file:   modal/connect-onboarding-for-express/client/script.js
+> #new file:   modal/connect-onboarding-for-express/client/success.html
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile.lock
+> #new file:   modal/connect-onboarding-for-express/server/README.md
+> #new file:   modal/connect-onboarding-for-express/server/server.py
+> #new file:   server.py
+> #new file:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Changes not staged for commit:
+> #modified:   ...]
+> #modified:   .cli.json
+> #modified:   .idea/identity-main.iml
+> #modified:   .idea/misc.xml
+> #modified:   .idea/vcs.xml
+> #modified:   .sr-select:first-child
+> #modified:   .sr-select:last-child
+> #modified:   README.md
+> #modified:   modal/server/ruby/server.rb
+> #modified:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Untracked files:
+> #,
+> 
+> # Please enter the commit message for your changes. Lines starting
+> # with '#' will be ignored, and an empty message aborts the commit.
+> #
+> # On branch master
+> # Your branch is up to date with 'origin/master'.
+> #
+> # Changes to be committed:
+> #new file:   ...]
+> #new file:   .idea/.gitignore
+> #new file:   .idea/codeStyles/Project.xml
+> #new file:   .idea/codeStyles/codeStyleConfig.xml
+> #new file:   .idea/identity-main.iml
+> #new file:   .idea/inspectionProfiles/Project_Default.xml
+> #new file:   .idea/inspectionProfiles/profiles_settings.xml
+> #new file:   .idea/misc.xml
+> #new file:   .idea/modules.xml
+> #new file:   .idea/vcs.xml
+> #modified:   README.md
+> #new file:   YouTrack_Server_TLS.pem
+> #new file:   checkout.css
+> #new file:   checkout.html
+> #new file:   checkout.js
+> #new file:   codiga.yml
+> #new file:   connect-destination-charge-checkout/.cli.json
+> #new file:   connect-destination-charge-checkout/.env.example
+> #new file:   connect-destination-charge-checkout/.gitignore
+> #new file:   connect-destination-charge-checkout/LICENSE
+> #new file:   connect-destination-charge-checkout/README.md
+> #new file:   connect-destination-charge-checkout/client/canceled.html
+> #new file:   connect-destination-charge-checkout/client/css/global.css
+> #new file:   connect-destination-charge-checkout/client/css/normalize.css
+> #new file:   connect-destination-charge-checkout/client/favicon.ico
+> #new file:   connect-destination-charge-checkout/client/guitar.png
+> #new file:   connect-destination-charge-checkout/client/index.html
+> #new file:   connect-destination-charge-checkout/client/script.js
+> #new file:   connect-destination-charge-checkout/client/success.html
+> #new file:   connect-destination-charge-checkout/server/.htaccess
+> #new file:   connect-destination-charge-checkout/server/README.md
+> #new file:   connect-destination-charge-checkout/server/composer.json
+> #new file:   connect-destination-charge-checkout/server/config.php
+> #new file:   connect-destination-charge-checkout/server/index.php
+> #new file:   e
+> #new file:   modal/connect-onboarding-for-express/.cli.json
+> #new file:   modal/connect-onboarding-for-express/.env.example
+> #new file:   modal/connect-onboarding-for-express/.gitignore
+> #new file:   modal/connect-onboarding-for-express/LICENSE
+> #new file:   modal/connect-onboarding-for-express/README.md
+> #new file:   modal/connect-onboarding-for-express/client/css/global.css
+> #new file:   modal/connect-onboarding-for-express/client/css/normalize.css
+> #new file:   modal/connect-onboarding-for-express/client/favicon.ico
+> #new file:   modal/connect-onboarding-for-express/client/index.html
+> #new file:   modal/connect-onboarding-for-express/client/script.js
+> #new file:   modal/connect-onboarding-for-express/client/success.html
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile
+> #new file:   modal/connect-onboarding-for-express/server/Pipfile.lock
+> #new file:   modal/connect-onboarding-for-express/server/README.md
+> #new file:   modal/connect-onboarding-for-express/server/server.py
+> #new file:   server.py
+> #new file:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Changes not staged for commit:
+> #modified:   ...]
+> #modified:   .cli.json
+> #modified:   .idea/identity-main.iml
+> #modified:   .idea/misc.xml
+> #modified:   .idea/vcs.xml
+> #modified:   .sr-select:first-child
+> #modified:   .sr-select:last-child
+> #modified:   README.md
+> #modified:   modal/server/ruby/server.rb
+> #modified:   subscription=sub_xxxxxxxxxxxxx,
+> #
+> # Untracked files:
+> #,
+> #:
+> #APIclient.swift
+> #APPAPIClient.h
+> #APPAPIClient.m
+> #APPAppDelegate.m
+> #AppDelegate.swift
+> #This property cannot be expanded (100 000 000 ).
+> #account_number:
+> #bank_name:
+> #error:
+> #helloworld/
+> #identity/
+> #invalid_request_error
+> #message
+> #request_log_url
+> #routing_number:
+> #type
+> #}
+> #},
+> #
+> stripe treasury transactions retrieve trxn_1N6j5kBRCd7whSqPIXYlJTQN
+> {
+>   "id": "trxn_1N6j5kBRCd7whSqPIXYlJTQN",
+>   "object": "treasury.transaction",
+>   "amount": -100,
+>   "balance_impact": {
+>     "cash": -100,
+>     "inbound_pending": 0,
+>     "outbound_pending": 100
+>   },
+>   "created": 1683848412,
+>   "currency": "usd",
+>   "description": "Jane Austen (6789) | Outbound transfer | transfer",
+>   "financial_account": "fa_1N6j5kBRCd7whSqPSueSHTWs",
+>   "flow": "obt_1N6j5kBRCd7whSqPiatcSEyn",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "status": "open",
+>   "status_transitions": {
+>     "posted_at": null,
+>     "void_at": null
+>   }
+>                     // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:
+              if let data = data {;                 do { Any]
+                      // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:
+  }
+   stripe treasury transactions list \
+>   --financial-account=fa_1N6j5kBRCd7whSqPSueSHTWs \
+>   --limit=3
+> {
+>   "object": "list",
+>   "url": "/v1/treasury/transactions",
+>   "has_more": false,
+>   "data": [
+>     {
+>       "id": "trxn_1N6j5kBRCd7whSqPIXYlJTQN",
+>       "object": "treasury.transaction",
+>       "amount": -100,
+>       "balance_impact": {
+>         "cash": -100,
+>         "inbound_pending": 0,
+>         "outbound_pending": 100
+>       },
+>       "created": 1683848412,
+>       "currency": "usd",
+>       "description": "Jane Austen (6789) | Outbound transfer | transfer",
+>       "financial_account": "fa_1N6j5kBRCd7whSqPSueSHTWs",
+>       "flow": "obt_1N6j5kBRCd7whSqPiatcSEyn",
+>       "flow_type": "outbound_transfer",
+>       "livemode": false,
+>       "status": "open",
+>       "status_transitions": {
+>         "posted_at": null,
+>         "void_at": null
+>       }
+>     },
+>     {...},
+>     {...}
+>   ]
+> }{
+>   "id": "trxne_1N6jFCBRCd7whSqPPqicrz7r",
+>   "object": "treasury.transaction_entry",
+>   "balance_impact": {
+>     "cash": 0,
+>     "inbound_pending": 0,
+>     "outbound_pending": -1000
+>   },
+>   "created": 1683848998,
+>   "currency": "usd",
+>   "effective_at": 1683848998,
+>   "financial_account": "fa_1N6jFCBRCd7whSqPm4m7B6sl",
+>   "flow": "obt_1N6jFCBRCd7whSqPwWha1sLU",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "transaction": "trxn_1N6jFCBRCd7whSqPomBoWeso",
+>   "type": "outbound_transfer"
+> }stripe treasury transaction_entries retrieve trxne_1N6jFCBRCd7whSqPPqicrz7r
+> {
+>   "id": "trxne_1N6jFCBRCd7whSqPPqicrz7r",
+>   "object": "treasury.transaction_entry",
+>   "balance_impact": {
+>     "cash": 0,
+>     "inbound_pending": 0,
+>     "outbound_pending": -1000
+>   },
+>   "created": 1683848998,
+>   "currency": "usd",
+>   "effective_at": 1683848998,
+>   "financial_account": "fa_1N6jFCBRCd7whSqPm4m7B6sl",
+>   "flow": "obt_1N6jFCBRCd7whSqPwWha1sLU",
+>   "flow_type": "outbound_transfer",
+>   "livemode": false,
+>   "transaction": "trxn_1N6jFCBRCd7whSqPomBoWeso",
+>   "type": "outbound_transfer"
+> }stripe treasury transaction_entries list \
+>   --financial-account=fa_1N6jFCBRCd7whSqPm4m7B6sl \
+>   --limit=3
+{
+  "object": "list",
+  "url": "/v1/treasury/received_credits",
+  "has_more": false,
+  "data": [
+    {
+      "id": "rc_1N6jRpBRCd7whSqPYIMhm1lz",
+      "object": "treasury.received_credit",
+      "amount": 1234,
+      "created": 1683849781,
+      "currency": "usd",
+      "description": "Stripe Test",
+      "failure_code": null,
+      "financial_account": "fa_1N6jRpBRCd7whSqPtua59kkd",
+      "hosted_regulatory_receipt_url": "https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xR3E0dEZCUkNkN3doU3FQKLWE9qIGMgYvOLXGMiY6NpMrKKjWdWTxInrkJVguy75VQAkpP-Vjrj9jCuUwqs8gDsLzcEUHWV79IBDQff2Vxb3kqc0u5Q",
+      "initiating_payment_method_details": {
+        "billing_details": {
+          "address": {
+            "city": null,
+            "country": null,
+            "line1": null,
+            "line2": null,
+            "postal_code": null,
+            "state": null
+          },
+          "email": null,
+          "name": "Jane Austen"
+        },
+        "type": "us_bank_account",
+        "us_bank_account": {
+          "bank_name": "STRIPE TEST BANK",
+          "last4": "6789",
+          "routing_number": "110000000"
+        }
+      },
+      "linked_flows": {
+        "credit_reversal": null,
+        "issuing_authorization": null,
+        "issuing_transaction": null,
+        "source_flow": null,
+        "source_flow_type": null
+      },
+      "livemode": false,
+      "network": "ach",
+      "reversal_details": {
+        "deadline": 1684195200,
+        "restricted_reason": null
+      },
+      "status": "succeeded",
+      "transaction": "trxn_1N6jRpBRCd7whSqPh9SI0udS"
+    },
+    {...},
+    {...}
+  ]
+}
+{
+  "id": "fcaowns_1N6jcDBRCd7whSqPf4C9ZTPW",
+  "object": "financial_connections.account_ownership",
+  "created": 1683850425,
+  "owners": {
+    "object": "list",
+    "data": [],
+    "has_more": false,
+    "url": "/v1/financial_connections/accounts/fca_1N6jcDBRCd7whSqPJdWj4v5q/owners?ownership=fcaowns_1N6jcDBRCd7whSqPf4C9ZTPW"
+  }
+}
+{
+  "id": "fcaown_1N6jcDBRCd7whSqP2eCsqHfr",
+  "object": "financial_connections.account_owner",
+  "email": "nobody+janesmith@stripe.com",
+  "name": "Jane Smith",
+  "ownership": "fcaowns_1N6jcDBRCd7whSqPHRD7Tpq5",
+  "phone": "+1 555-555-5555",
+  "raw_address": "123 Main Street, Everytown USA",
+  "refreshed_at": null
+}
\ No newline at end of file
Index: modal/connect-onboarding-for-express/server/Pipfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/server/Pipfile b/modal/connect-onboarding-for-express/server/Pipfile
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/server/Pipfile	(date 1683905007000)
@@ -0,0 +1,25 @@
+[[source]]
+name = "pypi"
+url = "https://pypi.org/simple"
+verify_ssl = true
+
+[dev-packages]
+
+[packages]
+certifi = "==2022.6.15"
+chardet = "==3.0.4"
+click = "==7.0"
+idna = "==3.3"
+itsdangerous = "==1.1.0"
+python-dotenv = "==0.10.3"
+requests = "==2.28.1"
+stripe = "==2.29.3"
+toml = "==0.9.6"
+urllib3 = "==1.26.12"
+Flask = "==1.1.2"
+Jinja2 = "==2.10.1"
+MarkupSafe = "==1.1.1"
+Werkzeug = "==2.1.2"
+
+[requires]
+python_version = "3.8"
Index: modal/connect-onboarding-for-express/server/Pipfile.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modal/connect-onboarding-for-express/server/Pipfile.lock b/modal/connect-onboarding-for-express/server/Pipfile.lock
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/modal/connect-onboarding-for-express/server/Pipfile.lock	(date 1683905007000)
@@ -0,0 +1,191 @@
+{
+    "_meta": {
+        "hash": {
+            "sha256": "ee426a83615246436cf101872cf79f63163ad06890480b5772e0081cfcc85f3b"
+        },
+        "pipfile-spec": 6,
+        "requires": {
+            "python_version": "3.8"
+        },
+        "sources": [
+            {
+                "name": "pypi",
+                "url": "https://pypi.org/simple",
+                "verify_ssl": true
+            }
+        ]
+    },
+    "default": {
+        "certifi": {
+            "hashes": [
+                "sha256:84c85a9078b11105f04f3036a9482ae10e4621616db313fe045dd24743a0820d",
+                "sha256:fe86415d55e84719d75f8b69414f6438ac3547d2078ab91b67e779ef69378412"
+            ],
+            "index": "pypi",
+            "version": "==2022.6.15"
+        },
+        "chardet": {
+            "hashes": [
+                "sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae",
+                "sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691"
+            ],
+            "index": "pypi",
+            "version": "==3.0.4"
+        },
+        "charset-normalizer": {
+            "hashes": [
+                "sha256:5a3d016c7c547f69d6f81fb0db9449ce888b418b5b9952cc5e6e66843e9dd845",
+                "sha256:83e9a75d1911279afd89352c68b45348559d1fc0506b054b346651b5e7fee29f"
+            ],
+            "markers": "python_version >= '3.6'",
+            "version": "==2.1.1"
+        },
+        "click": {
+            "hashes": [
+                "sha256:2335065e6395b9e67ca716de5f7526736bfa6ceead690adf616d925bdc622b13",
+                "sha256:5b94b49521f6456670fdb30cd82a4eca9412788a93fa6dd6df72c94d5a8ff2d7"
+            ],
+            "index": "pypi",
+            "version": "==7.0"
+        },
+        "flask": {
+            "hashes": [
+                "sha256:4efa1ae2d7c9865af48986de8aeb8504bf32c7f3d6fdc9353d34b21f4b127060",
+                "sha256:8a4fdd8936eba2512e9c85df320a37e694c93945b33ef33c89946a340a238557"
+            ],
+            "index": "pypi",
+            "version": "==1.1.2"
+        },
+        "idna": {
+            "hashes": [
+                "sha256:84d9dd047ffa80596e0f246e2eab0b391788b0503584e8945f2368256d2735ff",
+                "sha256:9d643ff0a55b762d5cdb124b8eaa99c66322e2157b69160bc32796e824360e6d"
+            ],
+            "index": "pypi",
+            "version": "==3.3"
+        },
+        "itsdangerous": {
+            "hashes": [
+                "sha256:321b033d07f2a4136d3ec762eac9f16a10ccd60f53c0c91af90217ace7ba1f19",
+                "sha256:b12271b2047cb23eeb98c8b5622e2e5c5e9abd9784a153e9d8ef9cb4dd09d749"
+            ],
+            "index": "pypi",
+            "version": "==1.1.0"
+        },
+        "jinja2": {
+            "hashes": [
+                "sha256:065c4f02ebe7f7cf559e49ee5a95fb800a9e4528727aec6f24402a5374c65013",
+                "sha256:14dd6caf1527abb21f08f86c784eac40853ba93edb79552aa1e4b8aef1b61c7b"
+            ],
+            "index": "pypi",
+            "version": "==2.10.1"
+        },
+        "markupsafe": {
+            "hashes": [
+                "sha256:00bc623926325b26bb9605ae9eae8a215691f33cae5df11ca5424f06f2d1f473",
+                "sha256:09027a7803a62ca78792ad89403b1b7a73a01c8cb65909cd876f7fcebd79b161",
+                "sha256:09c4b7f37d6c648cb13f9230d847adf22f8171b1ccc4d5682398e77f40309235",
+                "sha256:1027c282dad077d0bae18be6794e6b6b8c91d58ed8a8d89a89d59693b9131db5",
+                "sha256:13d3144e1e340870b25e7b10b98d779608c02016d5184cfb9927a9f10c689f42",
+                "sha256:195d7d2c4fbb0ee8139a6cf67194f3973a6b3042d742ebe0a9ed36d8b6f0c07f",
+                "sha256:22c178a091fc6630d0d045bdb5992d2dfe14e3259760e713c490da5323866c39",
+                "sha256:24982cc2533820871eba85ba648cd53d8623687ff11cbb805be4ff7b4c971aff",
+                "sha256:29872e92839765e546828bb7754a68c418d927cd064fd4708fab9fe9c8bb116b",
+                "sha256:2beec1e0de6924ea551859edb9e7679da6e4870d32cb766240ce17e0a0ba2014",
+                "sha256:3b8a6499709d29c2e2399569d96719a1b21dcd94410a586a18526b143ec8470f",
+                "sha256:43a55c2930bbc139570ac2452adf3d70cdbb3cfe5912c71cdce1c2c6bbd9c5d1",
+                "sha256:46c99d2de99945ec5cb54f23c8cd5689f6d7177305ebff350a58ce5f8de1669e",
+                "sha256:500d4957e52ddc3351cabf489e79c91c17f6e0899158447047588650b5e69183",
+                "sha256:535f6fc4d397c1563d08b88e485c3496cf5784e927af890fb3c3aac7f933ec66",
+                "sha256:596510de112c685489095da617b5bcbbac7dd6384aeebeda4df6025d0256a81b",
+                "sha256:62fe6c95e3ec8a7fad637b7f3d372c15ec1caa01ab47926cfdf7a75b40e0eac1",
+                "sha256:6788b695d50a51edb699cb55e35487e430fa21f1ed838122d722e0ff0ac5ba15",
+                "sha256:6dd73240d2af64df90aa7c4e7481e23825ea70af4b4922f8ede5b9e35f78a3b1",
+                "sha256:6f1e273a344928347c1290119b493a1f0303c52f5a5eae5f16d74f48c15d4a85",
+                "sha256:6fffc775d90dcc9aed1b89219549b329a9250d918fd0b8fa8d93d154918422e1",
+                "sha256:717ba8fe3ae9cc0006d7c451f0bb265ee07739daf76355d06366154ee68d221e",
+                "sha256:79855e1c5b8da654cf486b830bd42c06e8780cea587384cf6545b7d9ac013a0b",
+                "sha256:7c1699dfe0cf8ff607dbdcc1e9b9af1755371f92a68f706051cc8c37d447c905",
+                "sha256:7fed13866cf14bba33e7176717346713881f56d9d2bcebab207f7a036f41b850",
+                "sha256:84dee80c15f1b560d55bcfe6d47b27d070b4681c699c572af2e3c7cc90a3b8e0",
+                "sha256:88e5fcfb52ee7b911e8bb6d6aa2fd21fbecc674eadd44118a9cc3863f938e735",
+                "sha256:8defac2f2ccd6805ebf65f5eeb132adcf2ab57aa11fdf4c0dd5169a004710e7d",
+                "sha256:98bae9582248d6cf62321dcb52aaf5d9adf0bad3b40582925ef7c7f0ed85fceb",
+                "sha256:98c7086708b163d425c67c7a91bad6e466bb99d797aa64f965e9d25c12111a5e",
+                "sha256:9add70b36c5666a2ed02b43b335fe19002ee5235efd4b8a89bfcf9005bebac0d",
+                "sha256:9bf40443012702a1d2070043cb6291650a0841ece432556f784f004937f0f32c",
+                "sha256:a6a744282b7718a2a62d2ed9d993cad6f5f585605ad352c11de459f4108df0a1",
+                "sha256:acf08ac40292838b3cbbb06cfe9b2cb9ec78fce8baca31ddb87aaac2e2dc3bc2",
+                "sha256:ade5e387d2ad0d7ebf59146cc00c8044acbd863725f887353a10df825fc8ae21",
+                "sha256:b00c1de48212e4cc9603895652c5c410df699856a2853135b3967591e4beebc2",
+                "sha256:b1282f8c00509d99fef04d8ba936b156d419be841854fe901d8ae224c59f0be5",
+                "sha256:b1dba4527182c95a0db8b6060cc98ac49b9e2f5e64320e2b56e47cb2831978c7",
+                "sha256:b2051432115498d3562c084a49bba65d97cf251f5a331c64a12ee7e04dacc51b",
+                "sha256:b7d644ddb4dbd407d31ffb699f1d140bc35478da613b441c582aeb7c43838dd8",
+                "sha256:ba59edeaa2fc6114428f1637ffff42da1e311e29382d81b339c1817d37ec93c6",
+                "sha256:bf5aa3cbcfdf57fa2ee9cd1822c862ef23037f5c832ad09cfea57fa846dec193",
+                "sha256:c8716a48d94b06bb3b2524c2b77e055fb313aeb4ea620c8dd03a105574ba704f",
+                "sha256:caabedc8323f1e93231b52fc32bdcde6db817623d33e100708d9a68e1f53b26b",
+                "sha256:cd5df75523866410809ca100dc9681e301e3c27567cf498077e8551b6d20e42f",
+                "sha256:cdb132fc825c38e1aeec2c8aa9338310d29d337bebbd7baa06889d09a60a1fa2",
+                "sha256:d53bc011414228441014aa71dbec320c66468c1030aae3a6e29778a3382d96e5",
+                "sha256:d73a845f227b0bfe8a7455ee623525ee656a9e2e749e4742706d80a6065d5e2c",
+                "sha256:d9be0ba6c527163cbed5e0857c451fcd092ce83947944d6c14bc95441203f032",
+                "sha256:e249096428b3ae81b08327a63a485ad0878de3fb939049038579ac0ef61e17e7",
+                "sha256:e8313f01ba26fbbe36c7be1966a7b7424942f670f38e666995b88d012765b9be",
+                "sha256:feb7b34d6325451ef96bc0e36e1a6c0c1c64bc1fbec4b854f4529e51887b1621"
+            ],
+            "index": "pypi",
+            "version": "==1.1.1"
+        },
+        "python-dotenv": {
+            "hashes": [
+                "sha256:debd928b49dbc2bf68040566f55cdb3252458036464806f4094487244e2a4093",
+                "sha256:f157d71d5fec9d4bd5f51c82746b6344dffa680ee85217c123f4a0c8117c4544"
+            ],
+            "index": "pypi",
+            "version": "==0.10.3"
+        },
+        "requests": {
+            "hashes": [
+                "sha256:7c5599b102feddaa661c826c56ab4fee28bfd17f5abca1ebbe3e7f19d7c97983",
+                "sha256:8fefa2a1a1365bf5520aac41836fbee479da67864514bdb821f31ce07ce65349"
+            ],
+            "index": "pypi",
+            "version": "==2.28.1"
+        },
+        "stripe": {
+            "hashes": [
+                "sha256:67c906ea533c1ddfb80579a7efa0bd5e59e2b8c6422d58ee8237b592d955c81a",
+                "sha256:73f9af72ef8125e0d1c713177d006f1cbe95602beb3e10cb0b0a4ae358d1ae86"
+            ],
+            "index": "pypi",
+            "version": "==2.29.3"
+        },
+        "toml": {
+            "hashes": [
+                "sha256:380178cde50a6a79f9d2cf6f42a62a5174febe5eea4126fe4038785f1d888d42",
+                "sha256:a7901919d3e4f92ffba7ff40a9d697e35bbbc8a8049fe8da742f34c83606d957"
+            ],
+            "index": "pypi",
+            "version": "==0.9.6"
+        },
+        "urllib3": {
+            "hashes": [
+                "sha256:3fa96cf423e6987997fc326ae8df396db2a8b7c667747d47ddd8ecba91f4a74e",
+                "sha256:b930dd878d5a8afb066a637fbb35144fe7901e3b209d1cd4f524bd0e9deee997"
+            ],
+            "index": "pypi",
+            "version": "==1.26.12"
+        },
+        "werkzeug": {
+            "hashes": [
+                "sha256:1ce08e8093ed67d638d63879fd1ba3735817f7a80de3674d293f5984f25fb6e6",
+                "sha256:72a4b735692dd3135217911cbeaa1be5fa3f62bffb8745c5215420a03dc55255"
+            ],
+            "index": "pypi",
+            "version": "==2.1.2"
+        }
+    },
+    "develop": {}
+}
Index: APPAPIClient.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APPAPIClient.h b/APPAPIClient.h
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/APPAPIClient.h	(date 1683905007000)
@@ -0,0 +1,9 @@
+#import <StripeTerminal/StripeTerminal.h>
+
+// Example API client class for communicating with your backend
+@interface APPAPIClient : NSObject <SCPConnectionTokenProvider>
+
+// For simplicity, this example class is a singleton
++ (instancetype)shared;
+
+@end
\ No newline at end of file
Index: =
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/= b/=
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/=	(date 1683905007000)
@@ -0,0 +1,1 @@
+Could not open input file: 7.1.3
Index: APPAPIClient.m
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APPAPIClient.m b/APPAPIClient.m
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/APPAPIClient.m	(date 1683905007000)
@@ -0,0 +1,55 @@
+#import "APPAPIClient.h"
+
+@implementation APPAPIClient
+
++ (instancetype)shared {
+    static dispatch_once_t onceToken;
+    dispatch_once(&onceToken, ^{
+        _shared = [APPAPIClient new];
+    });
+    return _shared;
+}
+
+// Fetches a ConnectionToken from your backend
+- (void)fetchConnectionToken:(SCPConnectionTokenCompletionBlock)completion {
+    NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];
+    NSURLSession *session = [NSURLSession sessionWithConfiguration:config];
+    NSURL *url = [NSURL URLWithString:@"https://{{YOUR_BACKEND_URL}}/connection_token"];
+    if (!url) {
+        NSAssert(NO, @"Invalid backend URL");
+    }
+    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url];
+    request.HTTPMethod = @"POST";
+    NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
+        id jsonObject = nil;
+        NSError *jsonSerializationError;
+        if (data) {
+            jsonObject = [NSJSONSerialization JSONObjectWithData:data options:(NSJSONReadingOptions)kNilOptions error:&jsonSerializationError];
+        }
+        else {
+            NSError *error = [NSError errorWithDomain:@"com.stripe-terminal-ios.example"
+                                                 code:1000
+                                             userInfo:@{NSLocalizedDescriptionKey: @"No data in response from ConnectionToken endpoint"}];
+            completion(nil, error);
+        }
+        if (!(jsonObject && [jsonObject isKindOfClass:[NSDictionary class]])) {
+            completion(nil, jsonSerializationError);
+            return;
+        }
+        NSDictionary *json = (NSDictionary *)jsonObject;
+        id secret = json[@"secret"];
+        if (!(secret && [secret isKindOfClass:[NSString class]])) {
+            NSError *error = [NSError errorWithDomain:@"com.stripe-terminal-ios.example"
+                                                 code:2000
+                                             userInfo:@{NSLocalizedDescriptionKey: @"Missing `secret` in ConnectionToken JSON response"}];
+            completion(nil, error);
+            return;
+        }
+        completion((NSString *)secret, nil);
+    }];
+    [task resume];
+}
+
+// ...
+
+@end
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/.idea/.gitignore	(date 1683905007000)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: AppDelegate.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AppDelegate.swift b/AppDelegate.swift
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/AppDelegate.swift	(date 1683905007000)
@@ -0,0 +1,15 @@
+import UIKit
+import StripeTerminal
+
+@UIApplicationMain
+class AppDelegate: UIResponder, UIApplicationDelegate {
+
+    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
+        Terminal.setTokenProvider(APIClient.shared)
+        // ...
+        return true
+    }
+
+    // ...
+
+}
\ No newline at end of file
Index: APPAppDelegate.m
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APPAppDelegate.m b/APPAppDelegate.m
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/APPAppDelegate.m	(date 1683905007000)
@@ -0,0 +1,19 @@
+#import "APPAppDelegate.h"
+#import <StripeTerminal/StripeTerminal.h>
+#import "APPAPIClient.h"
+
+@implementation APPAppDelegate
+
+- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
+    [SCPTerminal setTokenProvider:[APPAPIClient shared]];
+    // ...
+    return YES;
+}
+
+// ...
+
+@end
+
+
+
+
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/.idea/vcs.xml	(date 1683905007000)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/helloworld" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: APIclient.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/APIclient.swift b/APIclient.swift
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/APIclient.swift	(date 1683905007000)
@@ -0,0 +1,46 @@
+import StripeTerminal
+
+// Example API client class for communicating with your backend
+class APIClient: ConnectionTokenProvider {
+
+    // For simplicity, this example class is a singleton
+    static let shared = APIClient()
+
+    // Fetches a ConnectionToken from your backend
+    func fetchConnectionToken(_ completion: @escaping ConnectionTokenCompletionBlock) {
+        let config = URLSessionConfiguration.default
+        let session = URLSession(configuration: config)
+        guard let url = URL(string: "https://{{YOUR_BACKEND_URL}}/connection_token") else {
+            fatalError("Invalid backend URL")
+        }
+        var request = URLRequest(url: url)
+        request.httpMethod = "POST"
+        let task = session.dataTask(with: request) { (data, response, error) in
+            if let data = data {
+                do {
+                    // Warning: casting using `as? [String: String]` looks simpler, but isn't safe:
+                    let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]
+                    if let secret = json?["secret"] as? String {
+                        completion(secret, nil)
+                    }
+                    else {
+                        let error = NSError(domain: "com.stripe-terminal-ios.example",
+                                            code: 2000,
+                                            userInfo: [NSLocalizedDescriptionKey: "Missing `secret` in ConnectionToken JSON response"])
+                        completion(nil, error)
+                    }
+                }
+                catch {
+                    completion(nil, error)
+                }
+            }
+            else {
+                let error = NSError(domain: "com.stripe-terminal-ios.example",
+                                    code: 1000,
+                                    userInfo: [NSLocalizedDescriptionKey: "No data in response from ConnectionToken endpoint"])
+                completion(nil, error)
+            }
+        }
+        task.resume()
+    }
+}
\ No newline at end of file
Index: identity/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/.gitignore b/identity/.gitignore
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/identity/.gitignore	(date 1683905007000)
@@ -0,0 +1,36 @@
+.env
+.DS_Store
+.vscode
+
+# Dependencies
+node_modules
+package-lock.json
+yarn.lock
+!/yarn.lock
+composer.lock
+
+# Ruby files
+Gemfile.lock
+
+# Python files
+__pycache__
+venv
+env
+
+# PHP files
+vendor
+logs
+
+# Java files
+.settings
+target/
+.classpath
+.factorypath
+.project
+
+# Typescript
+dist
+
+# Dotnet files
+obj/
+bin/
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/.idea/modules.xml	(date 1683905007000)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/identity-main.iml" filepath="$PROJECT_DIR$/.idea/identity-main.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: identity/.rspec
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/.rspec b/identity/.rspec
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/identity/.rspec	(date 1683905007000)
@@ -0,0 +1,1 @@
+--require spec_helper
Index: .idea/identity-main.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/identity-main.iml b/.idea/identity-main.iml
new file mode 100644
--- /dev/null	(date 1683905007000)
+++ b/.idea/identity-main.iml	(date 1683905007000)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/env" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.11" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: identity/.env.example
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/.env.example b/identity/.env.example
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/.env.example	(date 1683905008000)
@@ -0,0 +1,10 @@
+# Stripe keys
+# https://dashboard.stripe.com/test/apikeys
+STRIPE_PUBLISHABLE_KEY=pk_12345
+STRIPE_SECRET_KEY=sk_12345
+
+# https://stripe.com/docs/webhooks/signatures
+STRIPE_WEBHOOK_SECRET=whsec_1234
+
+# Environment variables
+STATIC_DIR=../../client
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/.idea/codeStyles/Project.xml	(date 1683905008000)
@@ -0,0 +1,7 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <option name="FORMATTER_TAGS_ENABLED" value="true" />
+    <option name="FORMATTER_TAGS_ACCEPT_REGEXP" value="true" />
+    <option name="ENABLE_SECOND_REFORMAT" value="true" />
+  </code_scheme>
+</component>
\ No newline at end of file
Index: identity/.cli.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/.cli.json b/identity/.cli.json
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/.cli.json	(date 1683905008000)
@@ -0,0 +1,38 @@
+{
+  "name": "identity",
+  "configureDotEnv": true,
+  "integrations": [
+    {
+      "name": "modal",
+      "clients": [
+        "html"
+      ],
+      "servers": [
+        "java",
+        "node",
+        "php",
+        "python",
+        "ruby",
+        "dotnet",
+        "go",
+        "node-typescript"
+      ]
+    },
+    {
+      "name": "redirect",
+      "clients": [
+        "html"
+      ],
+      "servers": [
+        "java",
+        "node",
+        "php",
+        "python",
+        "ruby",
+        "dotnet",
+        "go",
+        "node-typescript"
+      ]
+    }
+  ]
+}
Index: identity/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/README.md b/identity/README.md
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/README.md	(date 1683905008000)
@@ -0,0 +1,122 @@
+# Identity verification
+
+This sample shows you how to integrate with Stripe [Identity](https://stripe.com/docs/identity).
+
+### Integrations included:
+
+- [**Modal**](./modal) The modal integration allows you to collect identity documents as part of your existing flows. It
+  also limits the amount of private information you handle on your site, allows you to support users in a variety of
+  platforms and languages, and allows you to customize the style to match your branding.
+- [**Redirect**](./redirect) The redirect integration decreases the amount of private information you handle on your
+  site, allows you to support users in a variety of platforms and languages, and allows you to customize the style to
+  match your branding.
+
+## How to run locally
+
+This sample includes several server implementations.
+
+Follow the steps below to run locally.
+
+**1. Clone and configure the sample**
+
+The Stripe CLI is the fastest way to clone and configure a sample to run locally.
+
+**Using the Stripe CLI**
+
+If you haven't already installed the CLI, follow
+the [installation steps](https://github.com/stripe/stripe-cli#installation) in the project README. The CLI is useful for
+cloning samples and locally testing webhooks and Stripe integrations.
+
+In your terminal shell, run the Stripe CLI command to clone the sample:
+
+```
+stripe samples create identity
+```
+
+The CLI will walk you through picking your integration type, server and client
+languages, and configuring your `.env` config file with your Stripe API keys.
+
+**Installing and cloning manually**
+
+If you do not want to use the Stripe CLI, you can manually clone and configure the sample yourself:
+
+```
+git clone https://github.com/stripe-samples/identity
+```
+
+Copy the `.env.example` file into a file named `.env` in the folder of the
+server you want to use. For example:
+
+```
+cp .env.example server/node/.env
+```
+
+You will need a Stripe account in order to run the demo. Once you set up your
+account, go to the Stripe [developer
+dashboard](https://stripe.com/docs/development#api-keys) to find your API keys.
+
+```
+STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>
+STRIPE_SECRET_KEY=<replace-with-your-secret-key>
+```
+
+`STATIC_DIR` tells the server where to the client files are located and does not need to be modified unless you move the
+server files.
+
+**2. Follow the server instructions on how to run:**
+
+Pick the server language you want and follow the instructions in the server folder README on how to run.
+
+For example, if you want to run the Node server:
+
+```
+cd server/node # there's a README in this folder with instructions
+npm install
+npm start
+```
+
+**3. [Optional] Run a webhook locally:**
+
+If you want to test webhook piece of the integration with a local webhook on
+your machine, you can use the Stripe CLI to easily spin one up.
+
+Make sure to [install the CLI](https://stripe.com/docs/stripe-cli)
+and [link your Stripe account](https://stripe.com/docs/stripe-cli#link-account).
+
+```
+stripe listen --forward-to localhost:4242/webhook
+```
+
+The CLI will print a webhook secret key to the console. Set
+`STRIPE_WEBHOOK_SECRET` to this value in your `.env` file.
+
+You should see events logged in the console where the CLI is running.
+
+When you are ready to create a live webhook endpoint, follow our guide in the
+docs on [configuring a webhook endpoint in the
+dashboard](https://stripe.com/docs/webhooks/setup#configure-webhook-settings).
+
+## FAQ
+
+Q: Why did you pick these frameworks?
+
+A: We chose the most minimal framework to convey the key Stripe calls and concepts you need to understand. These demos
+are meant as an educational tool that helps you roadmap how to integrate Stripe within your own system independent of
+the framework.
+
+## Get support
+
+If you found a bug or want to suggest a new [feature/use case/sample], please [file an issue](../../issues).
+
+If you have questions, comments, or need help with code, we're here to help:
+
+- on [Discord](https://stripe.com/go/developer-chat)
+- on Twitter at [@StripeDev](https://twitter.com/StripeDev)
+- on Stack Overflow at the [stripe-payments](https://stackoverflow.com/tags/stripe-payments/info) tag
+
+Sign up to [stay updated with developer news](https://go.stripe.global/dev-digest).
+
+## Authors
+
+- [@bz-stripe](https://twitter.com/atav32)
+- [@cjavilla-stripe](https://twitter.com/cjav_dev)
Index: identity/client/submitted.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/client/submitted.html b/identity/client/submitted.html
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/client/submitted.html	(date 1683905008000)
@@ -0,0 +1,23 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Identity verification submitted</title>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+</head>
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <section class="container">
+            <div>
+                <h1>Thanks for submitting your identity document.</h1>
+                <p>We are processing your verification.</p>
+
+                <a href="/">Restart demo</a>
+            </div>
+        </section>
+    </div>
+</div>
+</body>
+</html>
Index: identity/client/css/normalize.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/client/css/normalize.css b/identity/client/css/normalize.css
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/client/css/normalize.css	(date 1683905008000)
@@ -0,0 +1,349 @@
+/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
+
+/* Document
+   ========================================================================== */
+
+/**
+ * 1. Correct the line height in all browsers.
+ * 2. Prevent adjustments of font size after orientation changes in iOS.
+ */
+
+ html {
+    line-height: 1.15; /* 1 */
+    -webkit-text-size-adjust: 100%; /* 2 */
+  }
+  
+  /* Sections
+     ========================================================================== */
+  
+  /**
+   * Remove the margin in all browsers.
+   */
+  
+  body {
+    margin: 0;
+  }
+  
+  /**
+   * Render the `main` element consistently in IE.
+   */
+  
+  main {
+    display: block;
+  }
+  
+  /**
+   * Correct the font size and margin on `h1` elements within `section` and
+   * `article` contexts in Chrome, Firefox, and Safari.
+   */
+  
+  h1 {
+    font-size: 2em;
+    margin: 0.67em 0;
+  }
+  
+  /* Grouping content
+     ========================================================================== */
+  
+  /**
+   * 1. Add the correct box sizing in Firefox.
+   * 2. Show the overflow in Edge and IE.
+   */
+  
+  hr {
+    box-sizing: content-box; /* 1 */
+    height: 0; /* 1 */
+    overflow: visible; /* 2 */
+  }
+  
+  /**
+   * 1. Correct the inheritance and scaling of font size in all browsers.
+   * 2. Correct the odd `em` font sizing in all browsers.
+   */
+  
+  pre {
+    font-family: monospace, monospace; /* 1 */
+    font-size: 1em; /* 2 */
+  }
+  
+  /* Text-level semantics
+     ========================================================================== */
+  
+  /**
+   * Remove the gray background on active links in IE 10.
+   */
+  
+  a {
+    background-color: transparent;
+  }
+  
+  /**
+   * 1. Remove the bottom border in Chrome 57-
+   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
+   */
+  
+  abbr[title] {
+    border-bottom: none; /* 1 */
+    text-decoration: underline; /* 2 */
+    text-decoration: underline dotted; /* 2 */
+  }
+  
+  /**
+   * Add the correct font weight in Chrome, Edge, and Safari.
+   */
+  
+  b,
+  strong {
+    font-weight: bolder;
+  }
+  
+  /**
+   * 1. Correct the inheritance and scaling of font size in all browsers.
+   * 2. Correct the odd `em` font sizing in all browsers.
+   */
+  
+  code,
+  kbd,
+  samp {
+    font-family: monospace, monospace; /* 1 */
+    font-size: 1em; /* 2 */
+  }
+  
+  /**
+   * Add the correct font size in all browsers.
+   */
+  
+  small {
+    font-size: 80%;
+  }
+  
+  /**
+   * Prevent `sub` and `sup` elements from affecting the line height in
+   * all browsers.
+   */
+  
+  sub,
+  sup {
+    font-size: 75%;
+    line-height: 0;
+    position: relative;
+    vertical-align: baseline;
+  }
+  
+  sub {
+    bottom: -0.25em;
+  }
+  
+  sup {
+    top: -0.5em;
+  }
+  
+  /* Embedded content
+     ========================================================================== */
+  
+  /**
+   * Remove the border on images inside links in IE 10.
+   */
+  
+  img {
+    border-style: none;
+  }
+  
+  /* Forms
+     ========================================================================== */
+  
+  /**
+   * 1. Change the font styles in all browsers.
+   * 2. Remove the margin in Firefox and Safari.
+   */
+  
+  button,
+  input,
+  optgroup,
+  select,
+  textarea {
+    font-family: inherit; /* 1 */
+    font-size: 100%; /* 1 */
+    line-height: 1.15; /* 1 */
+    margin: 0; /* 2 */
+  }
+  
+  /**
+   * Show the overflow in IE.
+   * 1. Show the overflow in Edge.
+   */
+  
+  button,
+  input { /* 1 */
+    overflow: visible;
+  }
+  
+  /**
+   * Remove the inheritance of text transform in Edge, Firefox, and IE.
+   * 1. Remove the inheritance of text transform in Firefox.
+   */
+  
+  button,
+  select { /* 1 */
+    text-transform: none;
+  }
+  
+  /**
+   * Correct the inability to style clickable types in iOS and Safari.
+   */
+  
+  button,
+  [type="button"],
+  [type="reset"],
+  [type="submit"] {
+    -webkit-appearance: button;
+  }
+  
+  /**
+   * Remove the inner border and padding in Firefox.
+   */
+  
+  button::-moz-focus-inner,
+  [type="button"]::-moz-focus-inner,
+  [type="reset"]::-moz-focus-inner,
+  [type="submit"]::-moz-focus-inner {
+    border-style: none;
+    padding: 0;
+  }
+  
+  /**
+   * Restore the focus styles unset by the previous rule.
+   */
+  
+  button:-moz-focusring,
+  [type="button"]:-moz-focusring,
+  [type="reset"]:-moz-focusring,
+  [type="submit"]:-moz-focusring {
+    outline: 1px dotted ButtonText;
+  }
+  
+  /**
+   * Correct the padding in Firefox.
+   */
+  
+  fieldset {
+    padding: 0.35em 0.75em 0.625em;
+  }
+  
+  /**
+   * 1. Correct the text wrapping in Edge and IE.
+   * 2. Correct the color inheritance from `fieldset` elements in IE.
+   * 3. Remove the padding so developers are not caught out when they zero out
+   *    `fieldset` elements in all browsers.
+   */
+  
+  legend {
+    box-sizing: border-box; /* 1 */
+    color: inherit; /* 2 */
+    display: table; /* 1 */
+    max-width: 100%; /* 1 */
+    padding: 0; /* 3 */
+    white-space: normal; /* 1 */
+  }
+  
+  /**
+   * Add the correct vertical alignment in Chrome, Firefox, and Opera.
+   */
+  
+  progress {
+    vertical-align: baseline;
+  }
+  
+  /**
+   * Remove the default vertical scrollbar in IE 10+.
+   */
+  
+  textarea {
+    overflow: auto;
+  }
+  
+  /**
+   * 1. Add the correct box sizing in IE 10.
+   * 2. Remove the padding in IE 10.
+   */
+  
+  [type="checkbox"],
+  [type="radio"] {
+    box-sizing: border-box; /* 1 */
+    padding: 0; /* 2 */
+  }
+  
+  /**
+   * Correct the cursor style of increment and decrement buttons in Chrome.
+   */
+  
+  [type="number"]::-webkit-inner-spin-button,
+  [type="number"]::-webkit-outer-spin-button {
+    height: auto;
+  }
+  
+  /**
+   * 1. Correct the odd appearance in Chrome and Safari.
+   * 2. Correct the outline style in Safari.
+   */
+  
+  [type="search"] {
+    -webkit-appearance: textfield; /* 1 */
+    outline-offset: -2px; /* 2 */
+  }
+  
+  /**
+   * Remove the inner padding in Chrome and Safari on macOS.
+   */
+  
+  [type="search"]::-webkit-search-decoration {
+    -webkit-appearance: none;
+  }
+  
+  /**
+   * 1. Correct the inability to style clickable types in iOS and Safari.
+   * 2. Change font properties to `inherit` in Safari.
+   */
+  
+  ::-webkit-file-upload-button {
+    -webkit-appearance: button; /* 1 */
+    font: inherit; /* 2 */
+  }
+  
+  /* Interactive
+     ========================================================================== */
+  
+  /*
+   * Add the correct display in Edge, IE 10+, and Firefox.
+   */
+  
+  details {
+    display: block;
+  }
+  
+  /*
+   * Add the correct display in all browsers.
+   */
+  
+  summary {
+    display: list-item;
+  }
+  
+  /* Misc
+     ========================================================================== */
+  
+  /**
+   * Add the correct display in IE 10+.
+   */
+  
+  template {
+    display: none;
+  }
+  
+  /**
+   * Add the correct display in IE 10.
+   */
+  
+  [hidden] {
+    display: none;
+  }
\ No newline at end of file
Index: identity/server/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/README.md b/identity/server/README.md
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/README.md	(date 1683905008000)
@@ -0,0 +1,47 @@
+# Your sample name
+
+An implementation in PHP
+
+## Requirements
+
+- PHP
+
+## How to run
+
+1. Confirm `.env` configuration
+
+Ensure the API keys are configured in `.env` in this directory. It should include the following keys:
+
+```yaml
+# Stripe API keys - see https://stripe.com/docs/development/quickstart#api-keys
+STRIPE_PUBLISHABLE_KEY=pk_test...
+STRIPE_SECRET_KEY=sk_test...
+
+# Required to verify signatures in the webhook handler.
+# See README on how to use the Stripe CLI to test webhooks
+STRIPE_WEBHOOK_SECRET=whsec_...
+
+# Path to front-end implementation. Note: PHP has it's own front end implementation.
+STATIC_DIR=../../client/html
+```
+
+2. Run composer to set up dependencies
+
+```
+composer install
+```
+
+3. Copy .env.example to .env and replace with your Stripe API keys
+
+```
+cp ../../.env.example .env
+```
+
+4. Run the server locally
+
+```
+cd public
+php -S 127.0.0.1:4242
+```
+
+4. Go to [localhost:4242](http://localhost:4242)
Index: identity/server/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/composer.json b/identity/server/composer.json
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/composer.json	(date 1683905008000)
@@ -0,0 +1,9 @@
+{
+  "require": {
+    "stripe/stripe-php": "^9.1",
+    "vlucas/phpdotenv": "^5.3"
+  },
+  "scripts": {
+    "start": "cd public && php -S 0.0.0.0:4242"
+  }
+}
Index: identity/server/.htaccess
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/.htaccess b/identity/server/.htaccess
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/.htaccess	(date 1683905008000)
@@ -0,0 +1,5 @@
+RewriteEngine On
+
+RewriteCond %{REQUEST_FILENAME} !-d
+RewriteCond %{REQUEST_FILENAME} !-f
+RewriteRule ^ index.php [QSA,L] 
Index: identity/server/public/submitted.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/public/submitted.html b/identity/server/public/submitted.html
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/public/submitted.html	(date 1683905008000)
@@ -0,0 +1,23 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Identity verification submitted</title>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+</head>
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <section class="container">
+            <div>
+                <h1>Thanks for submitting your identity document.</h1>
+                <p>We are processing your verification.</p>
+
+                <a href="/">Restart demo</a>
+            </div>
+        </section>
+    </div>
+</div>
+</body>
+</html>
Index: identity/server/public/shared.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/public/shared.php b/identity/server/public/shared.php
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/public/shared.php	(date 1683905008000)
@@ -0,0 +1,61 @@
+<?php
+
+require '../vendor/autoload.php';
+
+// If the .env file was not configured properly, display a helpful message.
+if(!file_exists('../.env')) {
+  ?>
+  <h1>Missing <code>.env</code></h1>
+
+  <p>Make a copy of <code>.env.example</code>, place it in the same directory as composer.json, and name it <code>.env</code>, then populate the variables.</p>
+  <p>It should look something like the following, but contain your <a href='https://dashboard.stripe.com/test/apikeys'>API keys</a>:</p>
+  <pre>STRIPE_PUBLISHABLE_KEY=pk_test...
+STRIPE_SECRET_KEY=sk_test...
+STRIPE_WEBHOOK_SECRET=whsec_...
+DOMAIN=http://localhost:4242</pre>
+  <hr>
+
+  <p>You can use this command to get started:</p>
+  <pre>cp .env.example .env</pre>
+
+  <?php
+  exit;
+}
+
+// Load `.env` file from the server directory so that
+// environment variables are available in $_ENV or via
+// getenv().
+$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/..');
+$dotenv->load();
+
+// Make sure the configuration file is good.
+if (!$_ENV['STRIPE_SECRET_KEY']) {
+  ?>
+
+  <h1>Invalid <code>.env</code></h1>
+  <p>Make a copy of <code>.env.example</code> and name it <code>.env</code>, then populate the variables.</p>
+  <p>It should look something like the following, but contain your <a href='https://dashboard.stripe.com/test/apikeys'>API keys</a>:</p>
+  <pre>STRIPE_PUBLISHABLE_KEY=pk_test...
+STRIPE_SECRET_KEY=sk_test...
+STRIPE_WEBHOOK_SECRET=whsec_...
+DOMAIN=http://localhost:4242</pre>
+  <hr>
+
+  <p>You can use this command to get started:</p>
+  <pre>cp .env.example .env</pre>
+
+  <?php
+  exit;
+}
+
+// For sample support and debugging. Not required for production:
+\Stripe\Stripe::setAppInfo(
+  "stripe-samples/identity/modal",
+  "0.0.2",
+  "https://github.com/stripe-samples"
+);
+
+$stripe = new \Stripe\StripeClient([
+  'api_key' => $_ENV['STRIPE_SECRET_KEY'],
+  'stripe_version' => '2020-08-27',
+]);
Index: identity/server/public/webhook.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/public/webhook.php b/identity/server/public/webhook.php
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/public/webhook.php	(date 1683905008000)
@@ -0,0 +1,44 @@
+<?php
+
+require_once 'shared.php';
+header('Content-Type: application/json');
+
+$input = file_get_contents('php://input');
+$body = json_decode($input);
+$event = null;
+
+try {
+  // Make sure the event is coming from Stripe by checking the signature header
+  $event = \Stripe\Webhook::constructEvent(
+    $input,
+    $_SERVER['HTTP_STRIPE_SIGNATURE'],
+    $_ENV['STRIPE_WEBHOOK_SECRET']
+  );
+}
+catch (Exception $e) {
+  http_response_code(403);
+  echo json_encode([ 'error' => $e->getMessage() ]);
+  exit;
+}
+
+
+if ($event->type == 'identity.verification_session.verified') {
+  // All the verification checks passed
+  $verification_session = event->data->object;
+} elseif ($event->type == 'identity.verification_session.requires_input') {
+  # At least one of the verification checks failed
+  $verification_session = event->data->object;
+
+  if ($verification_session->last_error->code == 'document_unverified_other') {
+    # The document was invalid
+  } elseif ($verification_session->last_error->code == 'document_expired') {
+    # The document was expired
+  } elseif $verification_session->last_error->code == 'document_type_not_suported') {
+    # The document type was not supported
+  } else {
+    # ...
+  }
+}
+
+
+echo json_encode(['status' => 'success']);
Index: identity/server/public/utils.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/public/utils.js b/identity/server/public/utils.js
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/public/utils.js	(date 1683905008000)
@@ -0,0 +1,17 @@
+// Helper for displaying status messages.
+const addMessage = (message) => {
+  const messagesDiv = document.querySelector('#messages');
+  messagesDiv.style.display = 'block';
+  const messageWithLinks = addDashboardLinks(message);
+  messagesDiv.innerHTML += `> ${messageWithLinks}<br>`;
+  console.log(`Debug: ${message}`);
+};
+
+// Adds links for known Stripe objects to the Stripe dashboard.
+const addDashboardLinks = (message) => {
+  const piDashboardBase = 'https://dashboard.stripe.com/test/payments';
+  return message.replace(
+    /(pi_(\S*)\b)/g,
+    `<a href="${piDashboardBase}/$1" target="_blank">$1</a>`
+  );
+};
Index: identity/server/public/css/base.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/public/css/base.css b/identity/server/public/css/base.css
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/public/css/base.css	(date 1683905008000)
@@ -0,0 +1,87 @@
+@import url('https://fonts.googleapis.com/css?family=Raleway&display=swap');
+
+:root {
+  --light-grey: #F6F9FC;
+  --dark-terminal-color: #0A2540;
+  --accent-color: #635BFF;
+  --radius: 3px;
+}
+
+body {
+  padding: 20px;
+  font-family: 'Raleway';
+  display: flex;
+  justify-content: center;
+  font-size: 1.2em;
+  color: var(--dark-terminal-color);
+}
+
+main {
+  width: 480px;
+}
+
+form > * {
+  margin: 10px 0;
+}
+
+button {
+  background-color: var(--accent-color);
+}
+
+button {
+  background: var(--accent-color);
+  border-radius: var(--radius);
+  color: white;
+  border: 0;
+  padding: 12px 16px;
+  margin-top: 16px;
+  font-weight: 600;
+  cursor: pointer;
+  transition: all 0.2s ease;
+  display: block;
+}
+button:hover {
+  filter: contrast(115%);
+}
+button:active {
+  transform: translateY(0px) scale(0.98);
+  filter: brightness(0.9);
+}
+button:disabled {
+  opacity: 0.5;
+  cursor: none;
+}
+
+input, select {
+  display: block;
+  font-size: 1.1em;
+  width: 100%;
+}
+
+label {
+  display: block;
+}
+
+a {
+  color: var(--accent-color);
+  font-weight: 900;
+}
+
+#payment-form {
+  border: #F6F9FC solid 1px;
+  border-radius: var(--radius);
+  padding: 20px;
+  margin: 20px 0;
+  box-shadow: 0 30px 50px -20px rgb(50 50 93 / 25%), 0 30px 60px -30px rgb(0 0 0 / 30%);
+}
+
+#messages {
+  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New';
+  display: none; /* hide initially, then show once the first message arrives */
+  background-color: #0A253C;
+  color: #00D924;
+  padding: 20px;
+  margin: 20px 0;
+  border-radius: var(--radius);
+  font-size:0.7em;
+}
Index: connect-destination-charge-checkout/server/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/server/README.md b/connect-destination-charge-checkout/server/README.md
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/connect-destination-charge-checkout/server/README.md	(date 1683905008000)
@@ -0,0 +1,24 @@
+# Connect destination charges with Checkout
+
+## Requirements
+
+* PHP >= 7.1.3
+* Composer
+* [Slim](http://www.slimframework.com/)
+* [Configured .env file](../../README.md)
+
+## How to run
+
+1. Install dependencies
+
+```
+composer install
+```
+
+2. Run the application
+
+```
+composer start
+```
+
+3. Go to `localhost:4242` in your browser to see the demo
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1683905008000)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1683905008000)
@@ -0,0 +1,20 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="LossyEncoding" enabled="true" level="INFORMATION" enabled_by_default="true" />
+    <inspection_tool class="PyCompatibilityInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ourVersions">
+        <value>
+          <list size="6">
+            <item index="0" class="java.lang.String" itemvalue="2.7" />
+            <item index="1" class="java.lang.String" itemvalue="3.5" />
+            <item index="2" class="java.lang.String" itemvalue="3.6" />
+            <item index="3" class="java.lang.String" itemvalue="3.7" />
+            <item index="4" class="java.lang.String" itemvalue="3.8" />
+            <item index="5" class="java.lang.String" itemvalue="3.11" />
+          </list>
+        </value>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/.idea/misc.xml	(date 1683905008000)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: connect-destination-charge-checkout/server/.htaccess
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/server/.htaccess b/connect-destination-charge-checkout/server/.htaccess
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/connect-destination-charge-checkout/server/.htaccess	(date 1683905008000)
@@ -0,0 +1,5 @@
+RewriteEngine On
+
+RewriteCond %{REQUEST_FILENAME} !-d
+RewriteCond %{REQUEST_FILENAME} !-f
+RewriteRule ^ index.php [QSA,L] 
Index: connect-destination-charge-checkout/server/composer.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/server/composer.json b/connect-destination-charge-checkout/server/composer.json
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/connect-destination-charge-checkout/server/composer.json	(date 1683905008000)
@@ -0,0 +1,11 @@
+{
+  "require": {
+    "slim/slim": "^3.12",
+    "vlucas/phpdotenv": "^3.4",
+    "stripe/stripe-php": "^9.0",
+    "monolog/monolog": "^1.17"
+  },
+  "scripts": {
+    "start": "php -S localhost:4242 index.php"
+  }
+}
Index: connect-destination-charge-checkout/server/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/server/index.php b/connect-destination-charge-checkout/server/index.php
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/connect-destination-charge-checkout/server/index.php	(date 1683905008000)
@@ -0,0 +1,142 @@
+<?php
+use Slim\Http\Request;
+use Slim\Http\Response;
+use Stripe\Stripe;
+
+require 'vendor/autoload.php';
+
+$dotenv = Dotenv\Dotenv::create(__DIR__);
+$dotenv->load();
+
+require './config.php';
+
+$app = new \Slim\App;
+
+// Instantiate the logger as a dependency
+$container = $app->getContainer();
+$container['logger'] = function ($c) {
+  $settings = $c->get('settings')['logger'];
+  $logger = new Monolog\Logger($settings['name']);
+  $logger->pushProcessor(new Monolog\Processor\UidProcessor());
+  $logger->pushHandler(new Monolog\Handler\StreamHandler(__DIR__ . '/logs/app.log', \Monolog\Logger::DEBUG));
+  return $logger;
+};
+
+$app->add(function ($request, $response, $next) {
+    Stripe::setApiKey(getenv('STRIPE_SECRET_KEY'));
+    return $next($request, $response);
+});
+
+function calculateOrderAmount($items) {
+	// Replace this constant with a calculation of the order's amount
+	// Calculate the order total on the server to prevent
+	// people from directly manipulating the amount on the client
+	return 1400;
+}
+
+function calculateApplicationFeeAmount($base_price, $quantity) {
+  // Take a 10% cut.
+	return 0.1 * $base_price * $quantity;
+}
+
+
+$app->post('/create-checkout-session', function(Request $request, Response $response, array $args) {
+  $domain_url = getenv('DOMAIN');
+  $base_price = getenv('BASE_PRICE');
+  $body = json_decode($request->getBody());
+  $quantity = $body->quantity;
+
+  // Create new Checkout Session for the order
+  // For full details see https://stripe.com/docs/api/checkout/sessions/create
+  $checkout_session = \Stripe\Checkout\Session::create([
+    'payment_method_types' => ['card'],
+    'line_items' => [[
+      'name' => 'Guitar lesson',
+      'images' => ['https://i.ibb.co/2PNy7yB/guitar.png'],
+      'quantity' => $quantity,
+      'amount' => $base_price,
+      'currency' => 'USD',
+    ]],
+    payment_intent_data => [
+      'application_fee_amount' => calculateApplicationFeeAmount($base_price, $quantity),
+      // The account receiving the funds, as passed from the client.
+      'transfer_data' => [
+        'destination' => $body->account
+      ],
+    ],
+    // ?session_id={CHECKOUT_SESSION_ID} means the redirect will have the session ID set as a query para
+    'success_url' => $domain_url . '/success.html?session_id={CHECKOUT_SESSION_ID}',
+    'cancel_url' => $domain_url . '/canceled.html',
+  ]);
+
+  return $response->withJson(array('sessionId' => $checkout_session['id']));
+});
+
+// Fetch the Checkout Session to display the JSON result on the success page
+$app->get('/checkout-session', function (Request $request, Response $response, array $args) {
+  $id = $request->getQueryParams()['sessionId'];
+  $checkout_session = \Stripe\Checkout\Session::retrieve($id);
+
+  return $response->withJson($checkout_session);
+});
+
+$app->get('/config', function (Request $request, Response $response, array $args) {
+  $accounts = \Stripe\Account::all(['limit' => 10]);
+  $pub_key = getenv('STRIPE_PUBLISHABLE_KEY');
+  $base_price = getenv('BASE_PRICE');
+  $currency = getenv('CURRENCY');
+  return $response->withJson([ 
+    'publicKey' => $pub_key, 
+    'basePrice' => $base_price, 
+    'currency' => $currency,
+    'accounts' => $accounts,
+  ]);
+});
+
+$app->get('/express-dashboard-link', function (Request $request, Response $response, array $args) {
+  $account_id = $request->getQueryParam('account_id');
+  $link = \Stripe\Account::createLoginLink(
+    $account_id,
+    ['redirect_url' => $request->getUri()->getBaseUrl()]
+  );
+  return $response->withJson(array('url' => $link->url));
+});
+
+$app->post('/webhook', function ($request, $response, $next) {
+  $payload = $request->getBody();
+  $sig_header = $request->getHeaderLine('stripe-signature');
+
+  $event = null;
+
+  // Verify webhook signature and extract the event.
+  // See https://stripe.com/docs/webhooks/signatures for more information.
+  try {
+    $event = \Stripe\Webhook::constructEvent(
+      $payload, $sig_header, getenv('STRIPE_WEBHOOK_SECRET')
+    );
+  } catch(\UnexpectedValueException $e) {
+    // Invalid payload.
+    return $response->withStatus(400);
+  } catch(\Stripe\Exception\SignatureVerificationException $e) {
+    // Invalid Signature.
+    return $response->withStatus(400);
+  }
+
+  if ($event->type == 'checkout.session.completed') {
+    $session = $event->data->object;
+    handleCheckoutSession($session);
+  }
+
+  return $response->withStatus(200);
+});
+
+function handleCheckoutSession($session) {
+  // Fulfill the purchase.
+  echo 'Session: ' . $session;
+};
+
+$app->get('/', function (Request $request, Response $response, array $args) {   
+  return $response->write(file_get_contents(getenv('STATIC_DIR') . '/index.html'));
+});
+
+$app->run();
Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server.py b/server.py
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/server.py	(date 1683905008000)
@@ -0,0 +1,45 @@
+#! /usr/bin/env python3.6
+"""
+Python 3.6 or newer required.
+"""
+import json
+
+import stripe
+
+# This is your test secret API key.
+stripe.api_key = 'sk_test_uaxz8O6EqdRdgSy5uC5FcRFb'
+
+from flask import Flask, jsonify, request
+
+app = Flask(__name__, static_folder='public',
+            static_url_path='', template_folder='public')
+
+
+def calculate_order_amount(items):
+    # Replace this constant with a calculation of the order's amount
+    # Calculate the order total on the server to prevent
+    # people from directly manipulating the amount on the client
+    return 1400
+
+
+@app.route('/create-payment-intent', methods=['POST'])
+def create_payment():
+    try:
+        data = json.loads(request.data)
+        # Create a PaymentIntent with the order amount and currency
+        intent = stripe.PaymentIntent.create(
+            amount=calculate_order_amount(data['items']),
+            currency='eur',
+            automatic_payment_methods={
+                'enabled': True,
+            },
+        )
+        return jsonify({
+            'clientSecret': intent['client_secret']
+        })
+    except Exception as e:
+        return jsonify(error=str(e)), 403
+
+
+if __name__ == '__main__':
+    app.run(port=4242)
Index: ...]
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/...] b/...]
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/...]	(date 1683905008000)
@@ -0,0 +1,1 @@
+https://webtechnicom.net
\ No newline at end of file
Index: YouTrack_Server_TLS.pem
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/YouTrack_Server_TLS.pem b/YouTrack_Server_TLS.pem
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/YouTrack_Server_TLS.pem	(date 1683905008000)
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCvDruh2QA8HWxC
+6XReuxmdWWV7/SoFihCOv7oAJdy4yxH455s1q8k4ce94FTjlW1c8PrOlA1RnpM1A
+bCY5ucVyyIfjRkE2jReHPQ7QJoo7hGt5c0oo/sGKAicCyiJWVVb5PRNz7NttRG/E
+PDZiXZuLdgfNu5avQGD+iOX2Z/qnvjJr8cvYW6FA/Ohb1vQ1oowOiv9FPCJ9l5Pn
+oUrMm49knTYgdelPwrG7dGjzyELxqe1tVqXbv5zeRZlVBfFyvCheoiKNx46ibJZ3
+mdIvtGopDgO8JwrQBDAA+cwrPA1mBXhptrzF0dE8yMqLQ2Uez+q2atvHyHHeDFAT
+SHCoDXU7AgMBAAECggEACvfUgrylZUl/UHvvD3EP7EoUb93PUF8zpWCsMePYE030
+jNCkwAqeMLwBbIKBOOxC/XfSP/WtnVF342BDTtztsEDnNAgMAEkmdGc7cog6TftV
+09teMKOxkvOKkoQBUxZwEhf6YYoxagRehQA0H2/3qxe/P8ElR6AJfmPWa1yyxD1Y
+RWBOd+X6hNlXV6XmpK+fu8IWF6oLJU+rYHPNI/qa6sqpVvIowXqHx9Jzz0PQvzbJ
+NTqgFrVj0kGBDx3yslrxr3aHILwBP4dKA5rxrbbWYtMBUJZVcDGEGx1KUnKwct7R
+VeF3VQ1+p7HBzfyRX/xxhfAQkilGHOFOUyXX6cXqAQKBgQC9Q2czSnNZXhqu7Jbt
+SbSLwTePrm1CKkjqfnZ+7lHb9m5J3qKijZ690IVBLkONjJZRINy0zhfds01GXT1a
+3yFWqR1PqPK8Mb2Y6sQ6tZdiEhL8CxBaGmsZQ/f7ZWuN1ThhzgMCmiQF3VdDwx00
++jtCqNDAhelQBF0NXeWBTZMOAQKBgQDsyP4RqwFOpARopsDdugwWeR/SxnEZno8i
+xMW9QxW4ycN5GUe5iatBy880od6xXICIVkEQHJPwm+Nd6Y7Y6e8LikI7wKxXG9mh
+xix+YjFO72CaQnqY0a1PxARa15pY9bYJ9eWXFFdkSJbJyayXn0xAk+taKPQdd1cM
+0F8Y0O87OwKBgB5cPqTSr5hJaTxgRYHBDg5RK2mIEIzJnbLIIJgSAN2pNV3yMeKj
+lzBZz9Z55mpBgCd5fw4d9WQiDCZadKosGvv82u/ZaT7ZN9Hc7yd/083umk8GM1RQ
+4pdF+PTB+zPgXVALLR5wvZCXRhVfqkLCVVlHHV2U3a1xVb/8LQHGAO4BAoGAUImQ
+uUuz1x68jSfiw8frIp2yMEvk3jTrNIU/SL+PnNmrjf4GQlpMEMYUxS8lgqgW48iK
+usMtopIzRJcTSj5PW1p8arx/IeXMIVU5fwdBBDsxXWatMltnGpFudcONsSJp93tW
+ywtVKjvyZdIdzTiWhASL8Y+qcHdN+YLKRbOTG08CgYAQu8jvrATOATBHvc+tyv/W
+XMdAx8jNKYUxWOeX3L6NBxKaFZW5tZanin/yP9Z9bhuGLMZx0WzMo4TOmx5Iu+DN
+uM7AmigHI/wvmYRAO3JrUGLHtOCSmbRccI5j8w2144UF6Nin5sntkv752CLp34Ik
+YLDaIXTftTAavHw93GsnOQ==
+-----END PRIVATE KEY-----
Index: connect-destination-charge-checkout/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/README.md b/connect-destination-charge-checkout/README.md
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/connect-destination-charge-checkout/README.md	(date 1683905008000)
@@ -0,0 +1,99 @@
+# Connect destination charges with Checkout
+
+This Stripe sample shows you how to process a
+Connect [destination charge](https://stripe.com/docs/connect/destination-charges)
+using [Stripe Checkout](https://stripe.com/docs/payments/checkout).
+Before using this sample, you should have onboarded at least one Connect account. For more about onboarding accounts and
+making Connect charges, read
+our [step-by-step Connect guide](https://stripe.com/docs/connect/collect-then-transfer-guide#accept-payment).
+
+![demo](.readme/screenshot.png)
+
+## How to run locally
+
+This sample includes 5 server implementations in Node, Ruby, Python, Java, and PHP.
+
+Follow the steps below to run locally.
+
+**1. Clone and configure the sample**
+
+**Using the Stripe CLI**
+
+If you haven't already installed the CLI, follow
+the [installation steps](https://github.com/stripe/stripe-cli#installation) in the project README. The CLI is useful for
+cloning samples and locally testing webhooks and Stripe integrations.
+
+In your terminal shell, run the Stripe CLI command to clone the sample:
+
+```
+stripe samples create connect-destination-charge-checkout
+```
+
+The CLI will walk you through picking your integration type, server and client languages. Make sure to configure your
+.env file as shown below.
+
+**Installing and cloning manually**
+
+If you do not want to use the Stripe CLI, you can manually clone the sample yourself:
+
+```
+git clone https://github.com/stripe-samples/connect-destination-charge-checkout
+```
+
+Make sure to configure your .env file as shown below.
+
+**Configuring your .env file**
+
+Copy the .env.example file into a file named .env in the folder of the server you want to use. For example:
+
+```
+cp .env.example server/node/.env
+```
+
+You will need a Stripe account in order to run the demo. Once you set up your account, go to the
+Stripe [developer dashboard](https://stripe.com/docs/development/quickstart#api-keys) to find your API keys.
+
+```
+STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>
+STRIPE_SECRET_KEY=<replace-with-your-secret-key>
+```
+
+`STATIC_DIR` tells the server where to the client files are located and does not need to be modified unless you move the
+server files.
+
+**2. Follow the server instructions on how to run:**
+
+Pick the server language you want and follow the instructions in the server folder README on how to run.
+
+For example, if you want to run the Node server:
+
+```
+cd server/node # there's a README in this folder with instructions
+npm install
+npm start
+```
+
+## FAQ
+
+Q: Why did you pick these frameworks?
+
+A: We chose the most minimal framework to convey the key Stripe calls and concepts you need to understand. These demos
+are meant as an educational tool that helps you roadmap how to integrate Stripe within your own system independent of
+the framework.
+
+## Get support
+
+If you found a bug or want to suggest a new [feature/use case/sample], please [file an issue](../../issues).
+
+If you have questions, comments, or need help with code, we're here to help:
+
+- on [Discord](https://stripe.com/go/developer-chat)
+- on Twitter at [@StripeDev](https://twitter.com/StripeDev)
+- on Stack Overflow at the [stripe-payments](https://stackoverflow.com/tags/stripe-payments/info) tag
+- by [email](mailto:support+github@stripe.com)
+
+Sign up to [stay updated with developer news](https://go.stripe.global/dev-digest).
+
+## Author(s)
+
+@emorphis
Index: connect-destination-charge-checkout/client/canceled.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/connect-destination-charge-checkout/client/canceled.html b/connect-destination-charge-checkout/client/canceled.html
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/connect-destination-charge-checkout/client/canceled.html	(date 1683905008000)
@@ -0,0 +1,23 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Stripe Destination Charge with Checkout</title>
+    <meta content="Stripe Destination Charge with Checkout" name="description"/>
+
+    <link href="favicon.ico" rel="icon" type="image/x-icon"/>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+</head>
+
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <div class="sr-payment-summary completed-view">
+            <h1>Your payment was canceled</h1>
+            <button onclick="window.location.href = '/';">Restart demo</button>
+        </div>
+    </div>
+</div>
+</body>
+</html>
\ No newline at end of file
Index: checkout.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout.html b/checkout.html
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/checkout.html	(date 1683905008000)
@@ -0,0 +1,28 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Accept a payment</title>
+    <meta content="A demo of a payment on Stripe" name="description"/>
+    <meta content="width=device-width, initial-scale=1" name="viewport"/>
+    <link href="checkout.css" rel="stylesheet"/>
+    <script src="https://js.stripe.com/v3/"></script>
+    <script defer src="checkout.js"></script>
+</head>
+<body>
+<!-- Display a payment form -->
+<form id="payment-form">
+    <div id="link-authentication-element">
+        <!--Stripe.js injects the Link Authentication Element-->
+    </div>
+    <div id="payment-element">
+        <!--Stripe.js injects the Payment Element-->
+    </div>
+    <button id="submit">
+        <div class="spinner hidden" id="spinner"></div>
+        <span id="button-text">Pay now</span>
+    </button>
+    <div class="hidden" id="payment-message"></div>
+</form>
+</body>
+</html>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1683905008000)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
+  </state>
+</component>
\ No newline at end of file
Index: identity/server/public/create-verification-session.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/public/create-verification-session.php b/identity/server/public/create-verification-session.php
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/server/public/create-verification-session.php	(date 1683905008000)
@@ -0,0 +1,17 @@
+<?php
+
+require './shared.php';
+
+if ($_SERVER['REQUEST_METHOD'] != 'POST') {
+  echo 'Invalid request';
+  exit;
+}
+
+$verification_session = $stripe->identity->verificationSessions->create([
+  'type' => 'document',
+  'metadata' => [
+    'user_id' => '{{USER_ID}}',
+  ]
+]);
+
+echo json_encode(['client_secret' => $verification_session->client_secret]);
Index: identity/Gemfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/Gemfile b/identity/Gemfile
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/Gemfile	(date 1683905008000)
@@ -0,0 +1,17 @@
+ # frozen_string_literal: true
+
+source "https://rubygems.org"
+
+git_source(:github) {|repo_name| "https://github.com/#{repo_name}" }
+
+gem 'rspec'
+gem 'rest-client'
+gem 'byebug'
+gem 'stripe'
+gem 'dotenv'
+
+gem 'selenium-webdriver'
+gem 'capybara'
+gem 'capybara-screenshot'
+
+gem 'rspec-github', require: false
Index: checkout.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout.css b/checkout.css
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/checkout.css	(date 1683905008000)
@@ -0,0 +1,142 @@
+/* Variables */
+* {
+    box-sizing: border-box;
+  }
+  
+  body {
+    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
+    font-size: 16px;
+    -webkit-font-smoothing: antialiased;
+    display: flex;
+    justify-content: center;
+    align-content: center;
+    height: 100vh;
+    width: 100vw;
+  }
+  
+  form {
+    width: 30vw;
+    min-width: 500px;
+    align-self: center;
+    box-shadow: 0px 0px 0px 0.5px rgba(50, 50, 93, 0.1),
+      0px 2px 5px 0px rgba(50, 50, 93, 0.1), 0px 1px 1.5px 0px rgba(0, 0, 0, 0.07);
+    border-radius: 7px;
+    padding: 40px;
+  }
+  
+  .hidden {
+    display: none;
+  }
+  
+  #payment-message {
+    color: rgb(105, 115, 134);
+    font-size: 16px;
+    line-height: 20px;
+    padding-top: 12px;
+    text-align: center;
+  }
+  
+  #payment-element {
+    margin-bottom: 24px;
+  }
+  
+  /* Buttons and links */
+  button {
+    background: #5469d4;
+    font-family: Arial, sans-serif;
+    color: #ffffff;
+    border-radius: 4px;
+    border: 0;
+    padding: 12px 16px;
+    font-size: 16px;
+    font-weight: 600;
+    cursor: pointer;
+    display: block;
+    transition: all 0.2s ease;
+    box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
+    width: 100%;
+  }
+  button:hover {
+    filter: contrast(115%);
+  }
+  button:disabled {
+    opacity: 0.5;
+    cursor: default;
+  }
+  
+  /* spinner/processing state, errors */
+  .spinner,
+  .spinner:before,
+  .spinner:after {
+    border-radius: 50%;
+  }
+  .spinner {
+    color: #ffffff;
+    font-size: 22px;
+    text-indent: -99999px;
+    margin: 0px auto;
+    position: relative;
+    width: 20px;
+    height: 20px;
+    box-shadow: inset 0 0 0 2px;
+    -webkit-transform: translateZ(0);
+    -ms-transform: translateZ(0);
+    transform: translateZ(0);
+  }
+  .spinner:before,
+  .spinner:after {
+    position: absolute;
+    content: "";
+  }
+  .spinner:before {
+    width: 10.4px;
+    height: 20.4px;
+    background: #5469d4;
+    border-radius: 20.4px 0 0 20.4px;
+    top: -0.2px;
+    left: -0.2px;
+    -webkit-transform-origin: 10.4px 10.2px;
+    transform-origin: 10.4px 10.2px;
+    -webkit-animation: loading 2s infinite ease 1.5s;
+    animation: loading 2s infinite ease 1.5s;
+  }
+  .spinner:after {
+    width: 10.4px;
+    height: 10.2px;
+    background: #5469d4;
+    border-radius: 0 10.2px 10.2px 0;
+    top: -0.1px;
+    left: 10.2px;
+    -webkit-transform-origin: 0px 10.2px;
+    transform-origin: 0px 10.2px;
+    -webkit-animation: loading 2s infinite ease;
+    animation: loading 2s infinite ease;
+  }
+  
+  @-webkit-keyframes loading {
+    0% {
+      -webkit-transform: rotate(0deg);
+      transform: rotate(0deg);
+    }
+    100% {
+      -webkit-transform: rotate(360deg);
+      transform: rotate(360deg);
+    }
+  }
+  @keyframes loading {
+    0% {
+      -webkit-transform: rotate(0deg);
+      transform: rotate(0deg);
+    }
+    100% {
+      -webkit-transform: rotate(360deg);
+      transform: rotate(360deg);
+    }
+  }
+  
+  @media only screen and (max-width: 600px) {
+    form {
+      width: 80vw;
+      min-width: initial;
+    }
+  }
\ No newline at end of file
Index: identity/client/css/global.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/client/css/global.css b/identity/client/css/global.css
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/client/css/global.css	(date 1683905008000)
@@ -0,0 +1,525 @@
+/* Variables */
+:root {
+  --gray-offset: rgba(0, 0, 0, 0.03);
+  --gray-border: rgba(0, 0, 0, 0.15);
+  --gray-light: rgba(0, 0, 0, 0.4);
+  --gray-mid: rgba(0, 0, 0, 0.7);
+  --gray-dark: rgba(0, 0, 0, 0.9);
+  --body-color: var(--gray-mid);
+  --headline-color: var(--gray-dark);
+  --accent-color: #0066f0;
+  --body-font-family: -apple-system, BlinkMacSystemFont, sans-serif;
+  --radius: 6px;
+  --form-width: 343px;
+}
+
+/* Base */
+* {
+  box-sizing: border-box;
+}
+body {
+  font-family: var(--body-font-family);
+  font-size: 16px;
+  color: var(--body-color);
+  -webkit-font-smoothing: antialiased;
+}
+h1,
+h2,
+h3,
+h4,
+h5,
+h6 {
+  color: var(--body-color);
+  margin-top: 2px;
+  margin-bottom: 4px;
+}
+h1 {
+  font-size: 27px;
+  color: var(--headline-color);
+}
+h4 {
+  font-weight: 500;
+  font-size: 14px;
+  color: var(--gray-light);
+}
+
+/* Layout */
+.sr-root {
+  display: flex;
+  flex-direction: row;
+  width: 100%;
+  max-width: 980px;
+  padding: 48px;
+  align-content: center;
+  justify-content: center;
+  height: auto;
+  min-height: 100vh;
+  margin: 0 auto;
+}
+.sr-header {
+  margin-bottom: 32px;
+}
+.sr-payment-summary {
+  margin-bottom: 20px;
+}
+.sr-main,
+.sr-content {
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+  height: 100%;
+  align-self: center;
+}
+.sr-main {
+  width: var(--form-width);
+}
+.sr-content {
+  padding-left: 48px;
+}
+.sr-header__logo {
+  background-image: var(--logo-image);
+  height: 24px;
+  background-size: contain;
+  background-repeat: no-repeat;
+  width: 100%;
+}
+.sr-legal-text {
+  color: var(--gray-light);
+  text-align: center;
+  font-size: 13px;
+  line-height: 17px;
+  margin-top: 12px;
+}
+.sr-field-error {
+  color: var(--accent-color);
+  text-align: left;
+  font-size: 13px;
+  line-height: 17px;
+  margin-top: 12px;
+}
+
+/* Form */
+.sr-form-row {
+  margin: 16px 0;
+}
+label {
+  font-size: 13px;
+  font-weight: 500;
+  margin-bottom: 8px;
+  display: inline-block;
+}
+
+/* Inputs */
+.sr-input,
+.sr-select,
+input[type="text"] {
+  border: 1px solid var(--gray-border);
+  border-radius: var(--radius);
+  padding: 5px 12px;
+  height: 44px;
+  width: 100%;
+  transition: box-shadow 0.2s ease;
+  background: white;
+  -moz-appearance: none;
+  -webkit-appearance: none;
+  appearance: none;
+  color: #32325d;
+}
+.sr-input:focus,
+input[type="text"]:focus,
+button:focus,
+.focused {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+  z-index: 9;
+}
+.sr-input::placeholder,
+input[type="text"]::placeholder {
+  color: var(--gray-light);
+}
+
+/* Checkbox */
+.sr-checkbox-label {
+  position: relative;
+  cursor: pointer;
+}
+
+.sr-checkbox-label input {
+  opacity: 0;
+  margin-right: 6px;
+}
+
+.sr-checkbox-label .sr-checkbox-check {
+  position: absolute;
+  left: 0;
+  height: 16px;
+  width: 16px;
+  background-color: white;
+  border: 1px solid var(--gray-border);
+  border-radius: 4px;
+  transition: all 0.2s ease;
+}
+
+.sr-checkbox-label input:focus ~ .sr-checkbox-check {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+}
+
+.sr-checkbox-label input:checked ~ .sr-checkbox-check {
+  background-color: var(--accent-color);
+  background-repeat: no-repeat;
+  background-size: 16px;
+  background-position: -1px -1px;
+}
+
+/* Select */
+.sr-select {
+  display: block;
+  height: 44px;
+  margin: 0;
+  background-repeat: no-repeat, repeat;
+  background-position: right 12px top 50%, 0 0;
+  background-size: 0.65em auto, 100%;
+}
+.sr-select::-ms-expand {
+  display: none;
+}
+.sr-select:hover {
+  cursor: pointer;
+}
+.sr-select:focus {
+  box-shadow: 0 0 0 1px rgba(50, 151, 211, 0.3), 0 1px 1px 0 rgba(0, 0, 0, 0.07),
+    0 0 0 4px rgba(50, 151, 211, 0.3);
+  outline: none;
+}
+.sr-select option {
+  font-weight: 400;
+}
+.sr-select:invalid {
+  color: var(--gray-light);
+}
+
+/* Combo inputs */
+.sr-combo-inputs {
+  display: flex;
+  flex-direction: column;
+}
+.sr-combo-inputs input,
+.sr-combo-inputs .sr-select {
+  border-radius: 0;
+  border-bottom: 0;
+}
+.sr-combo-inputs > input:first-child,
+.sr-combo-inputs > .sr-select:first-child {
+  border-radius: var(--radius) var(--radius) 0 0;
+}
+.sr-combo-inputs > input:last-child,
+.sr-combo-inputs > .sr-select:last-child {
+  border-radius: 0 0 var(--radius) var(--radius);
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:last-child input:first-child {
+  border-radius: 0 0 0 var(--radius);
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:last-child input:last-child {
+  border-radius: 0 0 var(--radius) 0;
+  border-bottom: 1px solid var(--gray-border);
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:first-child {
+  border-radius: var(--radius) 0 0 0;
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:last-child {
+  border-radius: 0 var(--radius) 0 0;
+}
+.sr-combo-inputs > .sr-combo-inputs-row:first-child input:only-child {
+  border-radius: var(--radius) var(--radius) 0 0;
+}
+.sr-combo-inputs-row {
+  width: 100%;
+  display: flex;
+}
+
+.sr-combo-inputs-row > input {
+  width: 100%;
+  border-radius: 0;
+}
+
+.sr-combo-inputs-row > input:first-child:not(:only-child) {
+  border-right: 0;
+}
+
+.sr-combo-inputs-row:not(:first-of-type) .sr-input {
+  border-radius: 0 0 var(--radius) var(--radius);
+}
+
+.sr-result {
+  height: 44px;
+  -webkit-transition: height 1s ease;
+  -moz-transition: height 1s ease;
+  -o-transition: height 1s ease;
+  transition: height 1s ease;
+  color: var(--font-color);
+  overflow: auto;
+}
+.sr-result code {
+  overflow: scroll;
+}
+.sr-result.expand {
+  height: 350px;
+}
+
+/* Buttons and links */
+button {
+  background: var(--accent-color);
+  border-radius: var(--radius);
+  color: white;
+  border: 0;
+  padding: 12px 16px;
+  margin-top: 16px;
+  font-weight: 600;
+  cursor: pointer;
+  transition: all 0.2s ease;
+  display: block;
+}
+button:hover {
+  filter: contrast(115%);
+}
+button:active {
+  transform: translateY(0px) scale(0.98);
+  filter: brightness(0.9);
+}
+button:disabled {
+  opacity: 0.5;
+  cursor: not-allowed;
+}
+
+.sr-payment-form button,
+.fullwidth {
+  width: 100%;
+}
+
+a {
+  color: var(--accent-color);
+  text-decoration: none;
+  transition: all 0.2s ease;
+}
+
+a:hover {
+  filter: brightness(0.8);
+}
+
+a:active {
+  filter: brightness(0.5);
+}
+
+/* Code block */
+.sr-callout {
+  background: var(--gray-offset);
+  padding: 12px;
+  border-radius: var(--radius);
+  max-height: 200px;
+  overflow: auto;
+}
+code,
+pre {
+  font-family: "SF Mono", "IBM Plex Mono", "Menlo", monospace;
+  font-size: 12px;
+}
+
+/* Stripe Element placeholder */
+.sr-card-element {
+  padding-top: 12px;
+}
+
+/* Responsiveness */
+@media (max-width: 720px) {
+  .sr-root {
+    flex-direction: column;
+    justify-content: flex-start;
+    padding: 48px 20px;
+    min-width: 320px;
+  }
+
+  .sr-header__logo {
+    background-position: center;
+  }
+
+  .sr-payment-summary {
+    text-align: center;
+  }
+
+  .sr-content {
+    display: none;
+  }
+
+  .sr-main {
+    width: 100%;
+  }
+}
+
+/* Pasha styles – Brand-overrides, can split these out */
+:root {
+  --accent-color: #ed5f74;
+  --headline-color: var(--accent-color);
+}
+
+.pasha-image-stack {
+  display: grid;
+  grid-gap: 12px;
+  grid-template-columns: auto auto;
+}
+
+.pasha-image-stack img {
+  border-radius: var(--radius);
+  background-color: var(--gray-border);
+  box-shadow: 0 7px 14px 0 rgba(50, 50, 93, 0.1),
+    0 3px 6px 0 rgba(0, 0, 0, 0.07);
+  transition: all 0.8s ease;
+  opacity: 0;
+}
+
+.pasha-image-stack img:nth-child(1) {
+  transform: translate(12px, -12px);
+  opacity: 1;
+}
+.pasha-image-stack img:nth-child(2) {
+  transform: translate(-24px, 16px);
+  opacity: 1;
+}
+.pasha-image-stack img:nth-child(3) {
+  transform: translate(68px, -100px);
+  opacity: 1;
+}
+
+/* todo: spinner/processing state, errors, animations */
+
+.spinner,
+.spinner:before,
+.spinner:after {
+  border-radius: 50%;
+}
+.spinner {
+  color: #ffffff;
+  font-size: 22px;
+  text-indent: -99999px;
+  margin: 0px auto;
+  position: relative;
+  width: 20px;
+  height: 20px;
+  box-shadow: inset 0 0 0 2px;
+  -webkit-transform: translateZ(0);
+  -ms-transform: translateZ(0);
+  transform: translateZ(0);
+}
+.spinner:before,
+.spinner:after {
+  position: absolute;
+  content: "";
+}
+.spinner:before {
+  width: 10.4px;
+  height: 20.4px;
+  background: var(--accent-color);
+  border-radius: 20.4px 0 0 20.4px;
+  top: -0.2px;
+  left: -0.2px;
+  -webkit-transform-origin: 10.4px 10.2px;
+  transform-origin: 10.4px 10.2px;
+  -webkit-animation: loading 2s infinite ease 1.5s;
+  animation: loading 2s infinite ease 1.5s;
+}
+.spinner:after {
+  width: 10.4px;
+  height: 10.2px;
+  background: var(--accent-color);
+  border-radius: 0 10.2px 10.2px 0;
+  top: -0.1px;
+  left: 10.2px;
+  -webkit-transform-origin: 0px 10.2px;
+  transform-origin: 0px 10.2px;
+  -webkit-animation: loading 2s infinite ease;
+  animation: loading 2s infinite ease;
+}
+@-webkit-keyframes loading {
+  0% {
+    -webkit-transform: rotate(0deg);
+    transform: rotate(0deg);
+  }
+  100% {
+    -webkit-transform: rotate(360deg);
+    transform: rotate(360deg);
+  }
+}
+@keyframes loading {
+  0% {
+    -webkit-transform: rotate(0deg);
+    transform: rotate(0deg);
+  }
+  100% {
+    -webkit-transform: rotate(360deg);
+    transform: rotate(360deg);
+  }
+}
+
+/* Animated form */
+
+.sr-root {
+  animation: 0.4s form-in;
+  animation-fill-mode: both;
+  animation-timing-function: ease;
+}
+
+.sr-payment-form .sr-form-row {
+  animation: 0.4s field-in;
+  animation-fill-mode: both;
+  animation-timing-function: ease;
+  transform-origin: 50% 0%;
+}
+
+/* need saas for loop :D  */
+.sr-payment-form .sr-form-row:nth-child(1) {
+  animation-delay: 0;
+}
+.sr-payment-form .sr-form-row:nth-child(2) {
+  animation-delay: 60ms;
+}
+.sr-payment-form .sr-form-row:nth-child(3) {
+  animation-delay: 120ms;
+}
+.sr-payment-form .sr-form-row:nth-child(4) {
+  animation-delay: 180ms;
+}
+.sr-payment-form .sr-form-row:nth-child(5) {
+  animation-delay: 240ms;
+}
+.sr-payment-form .sr-form-row:nth-child(6) {
+  animation-delay: 300ms;
+}
+.hidden {
+  display: none;
+}
+
+@keyframes field-in {
+  0% {
+    opacity: 0;
+    transform: translateY(8px) scale(0.95);
+  }
+  100% {
+    opacity: 1;
+    transform: translateY(0px) scale(1);
+  }
+}
+
+@keyframes form-in {
+  0% {
+    opacity: 0;
+    transform: scale(0.98);
+  }
+  100% {
+    opacity: 1;
+    transform: scale(1);
+  }
+}
Index: identity/client/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/client/index.html b/identity/client/index.html
new file mode 100644
--- /dev/null	(date 1683920096000)
+++ b/identity/client/index.html	(date 1683920096000)
@@ -0,0 +1,64 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8"/>
+    <title>Stripe Identity Sample</title>
+    <meta content="A demo of Stripe Identity" name="description"/>
+    <link href="css/normalize.css" rel="stylesheet"/>
+    <link href="css/global.css" rel="stylesheet"/>
+    <script src="https://js.stripe.com/v3/"></script>
+</head>
+<body>
+<div class="sr-root">
+    <div class="sr-main">
+        <section class="container">
+            <div>
+                <h1>Verify your identity to book</h1>
+                <h4>Get ready to take a photo of your ID and a selfie</h4>
+
+                <button id="verify-button">Verify me</button>
+            </div>
+        </section>
+    </div>
+</div>
+<script type="text/javascript">
+      document.addEventListener('DOMContentLoaded', async () => {
+
+        // Set your publishable key: remember to change this to your live publishable key in production
+        // Find your keys here: https://dashboard.stripe.com/apikeys
+        const {publishableKey} = await fetch('/config').then(r=>r.json());
+        const stripe = Stripe(publishableKey);
+
+        var verifyButton = document.getElementById('verify-button');
+        verifyButton.addEventListener('click', async () => {
+          // Get the VerificationSession client secret using the server-side
+          // endpoint you created in step 3.
+
+          try {
+
+            // Create the VerificationSession on the server.
+            const {client_secret} = await fetch('/create-verification-session', {
+              method: 'POST',
+            }).then(r => r.json())
+
+            // Open the modal on the client.
+            const {error} = await stripe.verifyIdentity(client_secret);
+            if(!error) {
+              window.location.href = '/submitted.html';
+            } else {
+              alert(error.message);
+            }
+          } catch(e) {
+            alert(e.message);
+          }
+        })
+
+      })
+
+
+
+
+
+</script>
+</body>
+</html>
Index: identity/server/public/index.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/server/public/index.php b/identity/server/public/index.php
new file mode 100755
--- /dev/null	(date 1683905008000)
+++ b/identity/server/public/index.php	(date 1683905008000)
@@ -0,0 +1,61 @@
+<?php
+require '../vendor/autoload.php';
+
+$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/..');
+$dotenv->load();
+?>
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="utf-8" />
+    <title>Stripe Identity Sample</title>
+    <meta name="description" content="A demo of Stripe Identity" />
+    <script src="https://js.stripe.com/v3/"></script>
+  </head>
+  <body>
+    <div class="sr-root">
+      <div class="sr-main">
+        <section class="container">
+          <div>
+            <h1>Verify your identity to book</h1>
+            <h4>Get ready to take a photo of your ID and a selfie</h4>
+
+            <button id="verify-button">Verify me</button>
+          </div>
+        </section>
+      </div>
+    </div>
+    <script type="text/javascript">
+      document.addEventListener('DOMContentLoaded', async () => {
+
+        // Set your publishable key: remember to change this to your live publishable key in production
+        // Find your keys here: https://dashboard.stripe.com/apikeys
+        const stripe = Stripe('<?= $_ENV["STRIPE_PUBLISHABLE_KEY"] ?>');
+
+        var verifyButton = document.getElementById('verify-button');
+        verifyButton.addEventListener('click', async () => {
+          // Get the VerificationSession client secret using the server-side
+          // endpoint you created in step 3.
+
+          try {
+
+            // Create the VerificationSession on the server.
+            const {client_secret} = await fetch('/create-verification-session.php', {
+              method: 'POST',
+            }).then(r => r.json())
+
+            // Open the modal on the client.
+            const {error} = await stripe.verifyIdentity(client_secret);
+            if(!error) {
+              window.location.href = '/submitted.html';
+            } else {
+              alert(error.message);
+            }
+          } catch(e) {
+            alert(e.message);
+          }
+        })
+      })
+    </script>
+  </body>
+</html>
Index: identity/LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/identity/LICENSE b/identity/LICENSE
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/identity/LICENSE	(date 1683905008000)
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2020 Stripe, Inc. (https://stripe.com)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
Index: checkout.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/checkout.js b/checkout.js
new file mode 100644
--- /dev/null	(date 1683905008000)
+++ b/checkout.js	(date 1683905008000)
@@ -0,0 +1,127 @@
+// This is your test publishable API key.
+const stripe = Stripe("pk_test_8hCyRzkL0TMNO5JshxMrUhge");
+
+// The items the customer wants to buy
+const items = [{ id: "xl-tshirt" }];
+
+let elements;
+
+initialize();
+checkStatus();
+
+document
+  .querySelector("#payment-form")
+  .addEventListener("submit", handleSubmit);
+
+let emailAddress = '';
+// Fetches a payment intent and captures the client secret
+async function initialize() {
+  const response = await fetch("/create-payment-intent", {
+    method: "POST",
+    headers: { "Content-Type": "application/json" },
+    body: JSON.stringify({ items }),
+  });
+  const { clientSecret } = await response.json();
+
+  const appearance = {
+    theme: 'stripe',
+  };
+  elements = stripe.elements({ appearance, clientSecret });
+
+  const linkAuthenticationElement = elements.create("linkAuthentication");
+  linkAuthenticationElement.mount("#link-authentication-element");
+
+  linkAuthenticationElement.on('change', (event) => {
+    emailAddress = event.value.email;
+  });
+
+  const paymentElementOptions = {
+    layout: "tabs",
+  };
+
+  const paymentElement = elements.create("payment", paymentElementOptions);
+  paymentElement.mount("#payment-element");
+}
+
+async function handleSubmit(e) {
+  e.preventDefault();
+  setLoading(true);
+
+  const { error } = await stripe.confirmPayment({
+    elements,
+    confirmParams: {
+      // Make sure to change this to your payment completion page
+      return_url: "http://localhost:4242/checkout.html",
+      receipt_email: emailAddress,
+    },
+  });
+
+  // This point will only be reached if there is an immediate error when
+  // confirming the payment. Otherwise, your customer will be redirected to
+  // your `return_url`. For some payment methods like iDEAL, your customer will
+  // be redirected to an intermediate site first to authorize the payment, then
+  // redirected to the `return_url`.
+  if (error.type === "card_error" || error.type === "validation_error") {
+    showMessage(error.message);
+  } else {
+    showMessage("An unexpected error occurred.");
+  }
+
+  setLoading(false);
+}
+
+// Fetches the payment intent status after payment submission
+async function checkStatus() {
+  const clientSecret = new URLSearchParams(window.location.search).get(
+    "payment_intent_client_secret"
+  );
+
+  if (!clientSecret) {
+    return;
+  }
+
+  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);
+
+  switch (paymentIntent.status) {
+    case "succeeded":
+      showMessage("Payment succeeded!");
+      break;
+    case "processing":
+      showMessage("Your payment is processing.");
+      break;
+    case "requires_payment_method":
+      showMessage("Your payment was not successful, please try again.");
+      break;
+    default:
+      showMessage("Something went wrong.");
+      break;
+  }
+}
+
+// ------- UI helpers -------
+
+function showMessage(messageText) {
+  const messageContainer = document.querySelector("#payment-message");
+
+  messageContainer.classList.remove("hidden");
+  messageContainer.textContent = messageText;
+
+  setTimeout(function () {
+    messageContainer.classList.add("hidden");
+    messageText.textContent = "";
+  }, 4000);
+}
+
+// Show a spinner on payment submission
+function setLoading(isLoading) {
+  if (isLoading) {
+    // Disable the button and show a spinner
+    document.querySelector("#submit").disabled = true;
+    document.querySelector("#spinner").classList.remove("hidden");
+    document.querySelector("#button-text").classList.add("hidden");
+  } else {
+    document.querySelector("#submit").disabled = false;
+    document.querySelector("#spinner").classList.add("hidden");
+    document.querySelector("#button-text").classList.remove("hidden");
+  }
+}
Index: bank_name:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bank_name: b/bank_name:
new file mode 100644
--- /dev/null	(date 1683906906000)
+++ b/bank_name:	(date 1683906906000)
@@ -0,0 +1,1 @@
+NETmanagement GMBH PRIVATE BANK
\ No newline at end of file
Index: 67890,
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/67890, b/67890,
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/67890,	(date 1683905956000)
@@ -0,0 +1,1 @@
+ <artifactId>accept-a-payment</artifactId>
\ No newline at end of file
Index: account_number:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account_number: b/account_number:
new file mode 100644
--- /dev/null	(date 1683905968000)
+++ b/account_number:	(date 1683905968000)
@@ -0,0 +1,54 @@
+CH68 0630 0506 3295 1455 6 
+ 
+stripe treasury transactions list \
+  --financial-account=fa_1N6j5kBRCd7whSqPSueSHTWs \
+  --limit=3
+  stripe financial_connections sessions create \
+  -d "account_holder[type]"=customer \
+  -d "account_holder[customer]"=cus_9s6XWPuHZWFcfK \
+  -d "permissions[]"=payment_method \
+  -d "permissions[]"=balances \
+  -d "filters[countries][]"=US
+
+  {
+  "id": "fcsess_1N6joTBRCd7whSqPsbG9EJR8",
+  "object": "financial_connections.session",
+  "account_holder": {
+    "customer": "cus_9s6XWPuHZWFcfK",
+    "type": "customer"
+  },
+  "accounts": {
+    "object": "list",
+    "data": [],
+    "has_more": true,
+    "url": "/v1/financial_connections/accounts"
+  },
+  "client_secret": "fcsess_..._secret_...",
+  "livemode": true,
+  "permissions": [
+    "payment_method",
+    "balances"
+  ]
+}
+{
+    "id": "fctxn_1N6jt4BRCd7whSqPQ1u2OnNe",
+    "object": "financial_connections.transaction",
+    "account": "fca_1N6jt4BRCd7whSqPNzWGWm0h",
+    "amount": 100 000 000.00 ,
+    "currency": "eur",
+    "description": "webtechnicom",
+    "livemode": true,
+    "status": "posted",
+    "status_transitions": {
+      "posted_at": 1683851470,
+      "void_at": true
+    },
+    "transacted_at": 1683851470,
+    "transaction_refresh": "fctxnref_NsUsW268VKY6hq2C8bi6XGQV",
+    "updated": 1683851470
+  
+  
+  
+
+    <artifactId>accept-a-payment</artifactId>  }
+  
Index: account_number_last4:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account_number_last4: b/account_number_last4:
new file mode 100644
--- /dev/null	(date 1683906344000)
+++ b/account_number_last4:	(date 1683906344000)
@@ -0,0 +1,1 @@
+**** **** **** 1493
\ No newline at end of file
Index: financial_addresses:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/financial_addresses: b/financial_addresses:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/financial_addresses:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: flow:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flow: b/flow:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/flow:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: posted_at:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/posted_at: b/posted_at:
new file mode 100644
--- /dev/null	(date 1683906906000)
+++ b/posted_at:	(date 1683906906000)
@@ -0,0 +1,50 @@
+CH68 0630 0506 3295 1455 6 
+ 
+stripe treasury transactions list \
+  --financial-account=fa_1N6j5kBRCd7whSqPSueSHTWs \
+  --limit=3
+  stripe financial_connections sessions create \
+  -d "account_holder[type]"=customer \
+  -d "account_holder[customer]"=cus_9s6XWPuHZWFcfK \
+  -d "permissions[]"=payment_method \
+  -d "permissions[]"=balances \
+  -d "filters[countries][]"=US
+
+  {
+  "id": "fcsess_1N6joTBRCd7whSqPsbG9EJR8",
+  "object": "financial_connections.session",
+  "account_holder": {
+    "customer": "cus_9s6XWPuHZWFcfK",
+    "type": "customer"
+  },
+  "accounts": {
+    "object": "list",
+    "data": [],
+    "has_more": true,
+    "url": "/v1/financial_connections/accounts"
+  },
+  "client_secret": "fcsess_..._secret_...",
+  "livemode": true,
+  "permissions": [
+    "payment_method",
+    "balances"
+  ]
+}
+{
+    "id": "fctxn_1N6jt4BRCd7whSqPQ1u2OnNe",
+    "object": "financial_connections.transaction",
+    "account": "fca_1N6jt4BRCd7whSqPNzWGWm0h",
+    "amount": 100 000 000.00 ,
+    "currency": "eur",
+    "description": "webtechnicom",
+    "livemode": true,
+    "status": "posted",
+    "status_transitions": {
+      "posted_at": 1683851470,
+      "void_at": true
+    },
+    "transacted_at": 1683851470,
+    "transaction_refresh": "fctxnref_NsUsW268VKY6hq2C8bi6XGQV",
+    "updated": 1683851470,
+ }
+  
Index: supported_networks:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/supported_networks: b/supported_networks:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/supported_networks:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: financial_account:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/financial_account: b/financial_account:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/financial_account:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: void_at:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/void_at: b/void_at:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/void_at:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: status_transitions:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/status_transitions: b/status_transitions:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/status_transitions:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: type:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/type: b/type:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/type:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: status:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/status: b/status:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/status:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: livemode:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/livemode: b/livemode:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/livemode:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: flow_type:
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flow_type: b/flow_type:
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/flow_type:	(date 1683905956000)
@@ -0,0 +1,164 @@
+# frozen_string_literal: true
+
+require
+'stripe'
+require
+'sinatra'
+require
+'dotenv'
+
+# Replace if using a different env file or config
+Dotenv.load
+
+# For sample support and debugging, not required for production:
+Stripe.set_app_info(
+    'stripe-samples/identity/modal',
+    version: '0.0.1',
+url: 'https://github.com/stripe-samples'
+)
+Stripe.api_version = '2020-08-27'
+Stripe.api_key = ENV['STRIPE_SECRET_KEY']
+
+set: static, true
+set: public_folder, File.join(File.dirname(__FILE__), ENV['STATIC_DIR'])
+set: port, 4242
+
+get
+'/'
+do
+content_type
+'text/html'
+send_file
+File.join(settings.public_folder, 'index.html')
+end
+
+get
+'/config'
+do
+content_type
+'application/json'
+{++
+publishableKey: ENV['STRIPE_PUBLISHABLE_KEY'],
+ }.to_json
+end
+
+post
+'/create-verification-session'
+do
+content_type
+'application/json'
+
+# See https://stripe.com/docs/api/identity/verification_sessions/create
+# for the full list of accepted parameters.
+verification_session = Stripe::Identity::VerificationSession.create({
+    type: 'document',  # 'id_number' | 'address'
+    metadata: {
+        user_id: '{{USER_ID}}',  # Optionally pass the ID of the user in your system.
+    },
+
+    # Additional options for configuring the verification session:
+    # options: {
+    #   document: {
+    #     # Array of strings of allowed identity document types.
+    #     allowed_types: ['driving_license'], # passport | id_card
+    #
+    #     # Collect an ID number and perform an ID number check with the
+    #     # document’s extracted name and date of birth.
+    #     require_id_number: true,
+    #
+    #     # Disable image uploads, identity document images have to be captured
+    #     # using the device’s camera.
+    #     require_live_capture: true,
+    #
+    #     # Capture a face image and perform a selfie check comparing a photo
+    #     # ID and a picture of your user’s face.
+    #     require_matching_selfie: true,
+    #   }
+    # },
+})
+
+# Send the VerificationSession client_secret to the client.
+{
+    client_secret: verification_session.client_secret
+}.to_json
+end
+
+post
+'/webhook'
+do
+# You can use webhooks to receive information about asynchronous payment events.
+# For more about our webhook events check out https://stripe.com/docs/webhooks.
+webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']
+payload = request.body.read
+if !webhook_secret.empty?
+# Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.
+sig_header = request.env['HTTP_STRIPE_SIGNATURE']
+event = nil
+
+begin
+event = Stripe::Webhook.construct_event(
+    payload, sig_header, webhook_secret
+)
+rescue
+JSON::ParserError = > e
+# Invalid payload
+status
+400
+return
+rescue
+Stripe::SignatureVerificationError = > e
+# Invalid signature
+puts
+'⚠️  Webhook signature verification failed.'
+status
+400
+return
+end
+else
+data = JSON.parse(payload, symbolize_names: true)
+event = Stripe::Event.construct_from(data)
+end
+
+case
+event.type
+when
+'identity.verification_session.requires_input'
+verification_session = event.data.object
+
+puts
+" ❌ Identity requires input from user: #{verification_session.id}"
+
+# At least one of the verification checks failed
+
+case
+verification_session.last_error.code
+when
+'document_unverified_other'
+# The document was invalid
+when
+'document_expired'
+# The document was expired
+when
+'document_type_not_suported'
+# The document type was not supported
+else
+# ...
+end
+when
+'identity.verification_session.verified'
+verification_session = event.data.object
+puts
+" ✅ Identity verified: #{verification_session.id}"
+when
+'identity.verification_session.canceled', 'identity.verification_session.created', 'identity.verification_session.processing'
+verification_session = event.data.object
+puts
+" 🟡 #{event.type}: #{verification_session.id}"
+end
+
+content_type
+'application/json'
+{
+    status: 'success'
+}.to_json
+end
Index: True Settings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/True Settings b/True Settings
new file mode 100644
--- /dev/null	(date 1683905956000)
+++ b/True Settings	(date 1683905956000)
@@ -0,0 +1,50 @@
+CH68 0630 0506 3295 1455 6 
+ 
+stripe treasury transactions list \
+  --financial-account=fa_1N6j5kBRCd7whSqPSueSHTWs \
+  --limit=3
+  stripe financial_connections sessions create \
+  -d "account_holder[type]"=customer \
+  -d "account_holder[customer]"=cus_9s6XWPuHZWFcfK \
+  -d "permissions[]"=payment_method \
+  -d "permissions[]"=balances \
+  -d "filters[countries][]"=US
+
+  {
+  "id": "fcsess_1N6joTBRCd7whSqPsbG9EJR8",
+  "object": "financial_connections.session",
+  "account_holder": {
+    "customer": "cus_9s6XWPuHZWFcfK",
+    "type": "customer"
+  },
+  "accounts": {
+    "object": "list",
+    "data": [],
+    "has_more": true,
+    "url": "/v1/financial_connections/accounts"
+  },
+  "client_secret": "fcsess_..._secret_...",
+  "livemode": true,
+  "permissions": [
+    "payment_method",
+    "balances"
+  ]
+}
+{
+    "id": "fctxn_1N6jt4BRCd7whSqPQ1u2OnNe",
+    "object": "financial_connections.transaction",
+    "account": "fca_1N6jt4BRCd7whSqPNzWGWm0h",
+    "amount": 100 000 000.00 ,
+    "currency": "eur",
+    "description": "webtechnicom",
+    "livemode": true,
+    "status": "posted",
+    "status_transitions": {
+      "posted_at": 1683851470,
+      "void_at": true
+    },
+    "transacted_at": 1683851470,
+    "transaction_refresh": "fctxnref_NsUsW268VKY6hq2C8bi6XGQV",
+    "updated": 1683851470,
+ }
+  
Index: LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>MIT License\n\nCopyright (c) 2020 Stripe, Inc. (https://stripe.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LICENSE b/LICENSE
--- a/LICENSE	(revision 422291ec30abe0f348481c15cf57ae00f30fefea)
+++ b/LICENSE	(date 1683905008000)
@@ -1,6 +1,7 @@
+$$
 MIT License
 
-Copyright (c) 2020 Stripe, Inc. (https://stripe.com)
+Copyright (c) 2023,webtechnicom NETmanagement Inc. (https://webtechnicom.net)
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
@@ -19,3 +20,5 @@
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
+
+$$
\ No newline at end of file
Index: .sr-select:last-child
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Stripe keys\n# https://dashboard.stripe.com/test/apikeys\nSTRIPE_PUBLISHABLE_KEY=pk_live_51AXJ0vFCL1ycm3RcEzn0xodUBXt9InPZHaW6ZqrHGiXPUPsmWGT9U27OtFMn7gxFtaemBMBfXUmKnsoWUETNefs100MaPY8r0N\nSTRIPE_SECRET_KEY=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\n# https://stripe.com/docs/webhooks/signatures\nSTRIPE_WEBHOOK_SECRET=whsec_rR6YYZq6U6y86BHx3eNSK74NDXftdMZ5\n\n# Environment variables\nSTATIC_DIR=https://webtechnicom.net/identity/verification/client\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.sr-select:last-child b/.sr-select:last-child
--- a/.sr-select:last-child	(revision 422291ec30abe0f348481c15cf57ae00f30fefea)
+++ b/.sr-select:last-child	(date 1683905008000)
@@ -6,5 +6,4 @@
 STRIPE_WEBHOOK_SECRET=whsec_rR6YYZq6U6y86BHx3eNSK74NDXftdMZ5
 
 # Environment variables
-STATIC_DIR=https://webtechnicom.net/identity/verification/client
-
+STATIC_DIR=https://webtechnicom.net/identity-verification-session.php
Index: .sr-select:first-child
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Stripe keys\n# https://dashboard.stripe.com/test/apikeys\nSTRIPE_PUBLISHABLE_KEY=pk_live_51AXJ0vFCL1ycm3RcEzn0xodUBXt9InPZHaW6ZqrHGiXPUPsmWGT9U27OtFMn7gxFtaemBMBfXUmKnsoWUETNefs100MaPY8r0N\nSTRIPE_SECRET_KEY=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\n# https://stripe.com/docs/webhooks/signatures\nSTRIPE_WEBHOOK_SECRET=whsec_rR6YYZq6U6y86BHx3eNSK74NDXftdMZ5\n\n# Environment variables\nSTATIC_DIR=https://webtechnicom.net/identity/verification/client\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.sr-select:first-child b/.sr-select:first-child
--- a/.sr-select:first-child	(revision 422291ec30abe0f348481c15cf57ae00f30fefea)
+++ b/.sr-select:first-child	(date 1683905008000)
@@ -6,5 +6,5 @@
 STRIPE_WEBHOOK_SECRET=whsec_rR6YYZq6U6y86BHx3eNSK74NDXftdMZ5
 
 # Environment variables
-STATIC_DIR=https://webtechnicom.net/identity/verification/client
+STATIC_DIR=https://webtechnicom.net/identity-verification-session.php
 
diff --git a/type b/type
new file mode 100644
diff --git a/, b/,
new file mode 100644
diff --git a/request_log_url b/request_log_url
new file mode 100644
diff --git a/: b/:
new file mode 100644
diff --git a/}, b/},
new file mode 100644
diff --git a/message b/message
new file mode 100644
diff --git a/routing_number: b/routing_number:
new file mode 100644
diff --git a/invalid_request_error b/invalid_request_error
new file mode 100644
diff --git a/} b/}
new file mode 100644
diff --git a/aba: b/aba:
new file mode 100644
diff --git a/{ b/{
new file mode 100644
diff --git a/e b/e
new file mode 100644
